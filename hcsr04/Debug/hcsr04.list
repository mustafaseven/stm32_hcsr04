
hcsr04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800803c  0800803c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800803c  0800803c  0001803c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008044  08008044  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008044  08008044  00018044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800804c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  20000090  080080dc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008f4  080080dc  000208f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d347  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cee  00000000  00000000  0003d407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  000410f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001390  00000000  00000000  000425f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002470b  00000000  00000000  00043988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aad7  00000000  00000000  00068093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d30f7  00000000  00000000  00082b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155c61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae0  00000000  00000000  00155cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008008 	.word	0x08008008

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008008 	.word	0x08008008

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fcb0 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f82c 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f99c 	bl	8000808 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f8e2 	bl	8000698 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f90e 	bl	80006f4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f93c 	bl	8000754 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f007 f982 	bl	80077e4 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 80004e0:	f000 f96e 	bl	80007c0 <MX_TIM10_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin,GPIO_PIN_SET );
 80004e4:	2201      	movs	r2, #1
 80004e6:	2104      	movs	r1, #4
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <main+0x5c>)
 80004ea:	f000 fff9 	bl	80014e0 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 80004ee:	2001      	movs	r0, #1
 80004f0:	f000 fd0c 	bl	8000f0c <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin,GPIO_PIN_RESET );
 80004f4:	2200      	movs	r2, #0
 80004f6:	2104      	movs	r1, #4
 80004f8:	4808      	ldr	r0, [pc, #32]	; (800051c <main+0x5c>)
 80004fa:	f000 fff1 	bl	80014e0 <HAL_GPIO_WritePin>
	  hcsr04.digital=HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 80004fe:	2104      	movs	r1, #4
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <main+0x5c>)
 8000502:	f000 ffd5 	bl	80014b0 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <main+0x60>)
 800050c:	609a      	str	r2, [r3, #8]
	  HAL_Delay(100);
 800050e:	2064      	movs	r0, #100	; 0x64
 8000510:	f000 fcfc 	bl	8000f0c <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000514:	f007 f98c 	bl	8007830 <MX_USB_HOST_Process>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin,GPIO_PIN_SET );
 8000518:	e7e4      	b.n	80004e4 <main+0x24>
 800051a:	bf00      	nop
 800051c:	40020000 	.word	0x40020000
 8000520:	20000158 	.word	0x20000158

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b098      	sub	sp, #96	; 0x60
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f007 fc98 	bl	8007e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 031c 	add.w	r3, r7, #28
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b31      	ldr	r3, [pc, #196]	; (8000620 <SystemClock_Config+0xfc>)
 800055c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055e:	4a30      	ldr	r2, [pc, #192]	; (8000620 <SystemClock_Config+0xfc>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	6413      	str	r3, [r2, #64]	; 0x40
 8000566:	4b2e      	ldr	r3, [pc, #184]	; (8000620 <SystemClock_Config+0xfc>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <SystemClock_Config+0x100>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a2a      	ldr	r2, [pc, #168]	; (8000624 <SystemClock_Config+0x100>)
 800057c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000580:	6013      	str	r3, [r2, #0]
 8000582:	4b28      	ldr	r3, [pc, #160]	; (8000624 <SystemClock_Config+0x100>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058e:	2301      	movs	r3, #1
 8000590:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a2:	2308      	movs	r3, #8
 80005a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b0:	2307      	movs	r3, #7
 80005b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fb0b 	bl	8003bd4 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005c4:	f000 fa3a 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fd6c 	bl	80040c4 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005f2:	f000 fa23 	bl	8000a3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005f6:	2301      	movs	r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005fa:	23c0      	movs	r3, #192	; 0xc0
 80005fc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005fe:	2302      	movs	r3, #2
 8000600:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	4618      	mov	r0, r3
 8000608:	f003 ff44 	bl	8004494 <HAL_RCCEx_PeriphCLKConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000612:	f000 fa13 	bl	8000a3c <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3760      	adds	r7, #96	; 0x60
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <HAL_GPIO_EXTI_Callback>:
  * @param None
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ECHO_Pin)
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d123      	bne.n	8000680 <HAL_GPIO_EXTI_Callback+0x58>
	{
		if(HAL_GPIO_ReadPin(ECHO_GPIO_Port,ECHO_Pin) == GPIO_PIN_SET)
 8000638:	2102      	movs	r1, #2
 800063a:	4813      	ldr	r0, [pc, #76]	; (8000688 <HAL_GPIO_EXTI_Callback+0x60>)
 800063c:	f000 ff38 	bl	80014b0 <HAL_GPIO_ReadPin>
 8000640:	4603      	mov	r3, r0
 8000642:	2b01      	cmp	r3, #1
 8000644:	d107      	bne.n	8000656 <HAL_GPIO_EXTI_Callback+0x2e>
		{
			__HAL_TIM_SetCounter(&htim10,0);
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <HAL_GPIO_EXTI_Callback+0x64>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim10);
 800064e:	480f      	ldr	r0, [pc, #60]	; (800068c <HAL_GPIO_EXTI_Callback+0x64>)
 8000650:	f004 f938 	bl	80048c4 <HAL_TIM_Base_Start>
	}
	else
	{

	}
}
 8000654:	e014      	b.n	8000680 <HAL_GPIO_EXTI_Callback+0x58>
			HAL_TIM_Base_Stop(&htim10);
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <HAL_GPIO_EXTI_Callback+0x64>)
 8000658:	f004 f99c 	bl	8004994 <HAL_TIM_Base_Stop>
			hcsr04.us = __HAL_TIM_GetCounter(&htim10);
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <HAL_GPIO_EXTI_Callback+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <HAL_GPIO_EXTI_Callback+0x68>)
 8000664:	6013      	str	r3, [r2, #0]
			hcsr04.distance = (hcsr04.us*10)/58;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_GPIO_EXTI_Callback+0x68>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	461a      	mov	r2, r3
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000676:	fba3 2302 	umull	r2, r3, r3, r2
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_GPIO_EXTI_Callback+0x68>)
 800067e:	6053      	str	r3, [r2, #4]
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020000 	.word	0x40020000
 800068c:	20000110 	.word	0x20000110
 8000690:	20000158 	.word	0x20000158
 8000694:	8d3dcb09 	.word	0x8d3dcb09

08000698 <MX_I2C1_Init>:



static void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x50>)
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MX_I2C1_Init+0x54>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006a4:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x58>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006d6:	f002 fc99 	bl	800300c <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 f9ac 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000bc 	.word	0x200000bc
 80006ec:	40005400 	.word	0x40005400
 80006f0:	000186a0 	.word	0x000186a0

080006f4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_I2S3_Init+0x54>)
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <MX_I2S3_Init+0x58>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2S3_Init+0x54>)
 8000700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000704:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_I2S3_Init+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2S3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_I2S3_Init+0x54>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_I2S3_Init+0x54>)
 800071c:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <MX_I2S3_Init+0x5c>)
 800071e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2S3_Init+0x54>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_I2S3_Init+0x54>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2S3_Init+0x54>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_I2S3_Init+0x54>)
 8000734:	f002 fdae 	bl	8003294 <HAL_I2S_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800073e:	f000 f97d 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200001bc 	.word	0x200001bc
 800074c:	40003c00 	.word	0x40003c00
 8000750:	00017700 	.word	0x00017700

08000754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_SPI1_Init+0x64>)
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <MX_SPI1_Init+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_SPI1_Init+0x64>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_SPI1_Init+0x64>)
 80007a6:	f003 ffb5 	bl	8004714 <HAL_SPI_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b0:	f000 f944 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000164 	.word	0x20000164
 80007bc:	40013000 	.word	0x40013000

080007c0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_TIM10_Init+0x40>)
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <MX_TIM10_Init+0x44>)
 80007c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_TIM10_Init+0x40>)
 80007cc:	2253      	movs	r2, #83	; 0x53
 80007ce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_TIM10_Init+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_TIM10_Init+0x40>)
 80007d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007dc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_TIM10_Init+0x40>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_TIM10_Init+0x40>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_TIM10_Init+0x40>)
 80007ec:	f004 f81b 	bl	8004826 <HAL_TIM_Base_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80007f6:	f000 f921 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000110 	.word	0x20000110
 8000804:	40014400 	.word	0x40014400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	4b7e      	ldr	r3, [pc, #504]	; (8000a1c <MX_GPIO_Init+0x214>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a7d      	ldr	r2, [pc, #500]	; (8000a1c <MX_GPIO_Init+0x214>)
 8000828:	f043 0310 	orr.w	r3, r3, #16
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b7b      	ldr	r3, [pc, #492]	; (8000a1c <MX_GPIO_Init+0x214>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0310 	and.w	r3, r3, #16
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	4b77      	ldr	r3, [pc, #476]	; (8000a1c <MX_GPIO_Init+0x214>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a76      	ldr	r2, [pc, #472]	; (8000a1c <MX_GPIO_Init+0x214>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b74      	ldr	r3, [pc, #464]	; (8000a1c <MX_GPIO_Init+0x214>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b70      	ldr	r3, [pc, #448]	; (8000a1c <MX_GPIO_Init+0x214>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a6f      	ldr	r2, [pc, #444]	; (8000a1c <MX_GPIO_Init+0x214>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b6d      	ldr	r3, [pc, #436]	; (8000a1c <MX_GPIO_Init+0x214>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b69      	ldr	r3, [pc, #420]	; (8000a1c <MX_GPIO_Init+0x214>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a68      	ldr	r2, [pc, #416]	; (8000a1c <MX_GPIO_Init+0x214>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <MX_GPIO_Init+0x214>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b62      	ldr	r3, [pc, #392]	; (8000a1c <MX_GPIO_Init+0x214>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a61      	ldr	r2, [pc, #388]	; (8000a1c <MX_GPIO_Init+0x214>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b5f      	ldr	r3, [pc, #380]	; (8000a1c <MX_GPIO_Init+0x214>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b5b      	ldr	r3, [pc, #364]	; (8000a1c <MX_GPIO_Init+0x214>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a5a      	ldr	r2, [pc, #360]	; (8000a1c <MX_GPIO_Init+0x214>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b58      	ldr	r3, [pc, #352]	; (8000a1c <MX_GPIO_Init+0x214>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2108      	movs	r1, #8
 80008ca:	4855      	ldr	r0, [pc, #340]	; (8000a20 <MX_GPIO_Init+0x218>)
 80008cc:	f000 fe08 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	4853      	ldr	r0, [pc, #332]	; (8000a24 <MX_GPIO_Init+0x21c>)
 80008d6:	f000 fe03 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2104      	movs	r1, #4
 80008de:	4852      	ldr	r0, [pc, #328]	; (8000a28 <MX_GPIO_Init+0x220>)
 80008e0:	f000 fdfe 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e4:	2200      	movs	r2, #0
 80008e6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008ea:	4850      	ldr	r0, [pc, #320]	; (8000a2c <MX_GPIO_Init+0x224>)
 80008ec:	f000 fdf8 	bl	80014e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008f0:	2308      	movs	r3, #8
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4846      	ldr	r0, [pc, #280]	; (8000a20 <MX_GPIO_Init+0x218>)
 8000908:	f000 fc36 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800090c:	2301      	movs	r3, #1
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4840      	ldr	r0, [pc, #256]	; (8000a24 <MX_GPIO_Init+0x21c>)
 8000924:	f000 fc28 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000928:	2308      	movs	r3, #8
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000938:	2305      	movs	r3, #5
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4838      	ldr	r0, [pc, #224]	; (8000a24 <MX_GPIO_Init+0x21c>)
 8000944:	f000 fc18 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000948:	2301      	movs	r3, #1
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094c:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <MX_GPIO_Init+0x228>)
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4833      	ldr	r0, [pc, #204]	; (8000a28 <MX_GPIO_Init+0x220>)
 800095c:	f000 fc0c 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8000960:	2302      	movs	r3, #2
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000964:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <MX_GPIO_Init+0x22c>)
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	482d      	ldr	r0, [pc, #180]	; (8000a28 <MX_GPIO_Init+0x220>)
 8000974:	f000 fc00 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000978:	2304      	movs	r3, #4
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4826      	ldr	r0, [pc, #152]	; (8000a28 <MX_GPIO_Init+0x220>)
 8000990:	f000 fbf2 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000994:	2304      	movs	r3, #4
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4824      	ldr	r0, [pc, #144]	; (8000a38 <MX_GPIO_Init+0x230>)
 80009a8:	f000 fbe6 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009be:	2305      	movs	r3, #5
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	481b      	ldr	r0, [pc, #108]	; (8000a38 <MX_GPIO_Init+0x230>)
 80009ca:	f000 fbd5 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ce:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009d2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_GPIO_Init+0x224>)
 80009e8:	f000 fbc6 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ec:	2320      	movs	r3, #32
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	480b      	ldr	r0, [pc, #44]	; (8000a2c <MX_GPIO_Init+0x224>)
 8000a00:	f000 fbba 	bl	8001178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2007      	movs	r0, #7
 8000a0a:	f000 fb7e 	bl	800110a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a0e:	2007      	movs	r0, #7
 8000a10:	f000 fb97 	bl	8001142 <HAL_NVIC_EnableIRQ>

}
 8000a14:	bf00      	nop
 8000a16:	3730      	adds	r7, #48	; 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	10120000 	.word	0x10120000
 8000a34:	10310000 	.word	0x10310000
 8000a38:	40020400 	.word	0x40020400

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a86:	2007      	movs	r0, #7
 8000a88:	f000 fb34 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_I2C_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12c      	bne.n	8000b14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ad6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <HAL_I2C_MspInit+0x8c>)
 8000af4:	f000 fb40 	bl	8001178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	; 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400

08000b28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <HAL_I2S_MspInit+0xc0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d14a      	bne.n	8000be0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <HAL_I2S_MspInit+0xc8>)
 8000bba:	f000 fadd 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bbe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd0:	2306      	movs	r3, #6
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <HAL_I2S_MspInit+0xcc>)
 8000bdc:	f000 facc 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40003c00 	.word	0x40003c00
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020800 	.word	0x40020800

08000bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_SPI_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12b      	bne.n	8000c72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c52:	23e0      	movs	r3, #224	; 0xe0
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c62:	2305      	movs	r3, #5
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_SPI_MspInit+0x8c>)
 8000c6e:	f000 fa83 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40013000 	.word	0x40013000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d10d      	bne.n	8000cb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_TIM_Base_MspInit+0x40>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <HAL_TIM_Base_MspInit+0x40>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_TIM_Base_MspInit+0x40>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40014400 	.word	0x40014400
 8000cc8:	40023800 	.word	0x40023800

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 f8d8 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f000 fbf5 	bl	8001514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <OTG_FS_IRQHandler+0x10>)
 8000d36:	f000 fe6f 	bl	8001a18 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200005e0 	.word	0x200005e0

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d207      	bcs.n	8000d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d74:	f007 f83e 	bl	8007df4 <__errno>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	e009      	b.n	8000d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <_sbrk+0x64>)
 8000d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20020000 	.word	0x20020000
 8000da4:	00000400 	.word	0x00000400
 8000da8:	200000ac 	.word	0x200000ac
 8000dac:	200008f8 	.word	0x200008f8

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dda:	490e      	ldr	r1, [pc, #56]	; (8000e14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ddc:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df0:	4c0b      	ldr	r4, [pc, #44]	; (8000e20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dfe:	f7ff ffd7 	bl	8000db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e02:	f006 fffd 	bl	8007e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fb5b 	bl	80004c0 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e18:	0800804c 	.word	0x0800804c
  ldr r2, =_sbss
 8000e1c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e20:	200008f4 	.word	0x200008f4

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_Init+0x40>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_Init+0x40>)
 8000e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_Init+0x40>)
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 f94f 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f808 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff fdf4 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023c00 	.word	0x40023c00

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f967 	bl	800115e <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f92f 	bl	800110a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000204 	.word	0x20000204

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000204 	.word	0x20000204

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <__NVIC_EnableIRQ+0x38>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f7ff ff8e 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff29 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff3e 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff8e 	bl	8001048 <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5d 	bl	8000ff4 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff31 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffa2 	bl	80010b0 <SysTick_Config>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
 8001192:	e16b      	b.n	800146c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 815a 	bne.w	8001466 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d005      	beq.n	80011ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d130      	bne.n	800122c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	f003 0201 	and.w	r2, r3, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b03      	cmp	r3, #3
 8001236:	d017      	beq.n	8001268 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d123      	bne.n	80012bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	220f      	movs	r2, #15
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	08da      	lsrs	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3208      	adds	r2, #8
 80012b6:	69b9      	ldr	r1, [r7, #24]
 80012b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0203 	and.w	r2, r3, #3
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80b4 	beq.w	8001466 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b60      	ldr	r3, [pc, #384]	; (8001484 <HAL_GPIO_Init+0x30c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a5f      	ldr	r2, [pc, #380]	; (8001484 <HAL_GPIO_Init+0x30c>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b5d      	ldr	r3, [pc, #372]	; (8001484 <HAL_GPIO_Init+0x30c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131a:	4a5b      	ldr	r2, [pc, #364]	; (8001488 <HAL_GPIO_Init+0x310>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a52      	ldr	r2, [pc, #328]	; (800148c <HAL_GPIO_Init+0x314>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d02b      	beq.n	800139e <HAL_GPIO_Init+0x226>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a51      	ldr	r2, [pc, #324]	; (8001490 <HAL_GPIO_Init+0x318>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x222>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a50      	ldr	r2, [pc, #320]	; (8001494 <HAL_GPIO_Init+0x31c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x21e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4f      	ldr	r2, [pc, #316]	; (8001498 <HAL_GPIO_Init+0x320>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x21a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4e      	ldr	r2, [pc, #312]	; (800149c <HAL_GPIO_Init+0x324>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x216>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4d      	ldr	r2, [pc, #308]	; (80014a0 <HAL_GPIO_Init+0x328>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x212>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4c      	ldr	r2, [pc, #304]	; (80014a4 <HAL_GPIO_Init+0x32c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x20e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <HAL_GPIO_Init+0x330>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x20a>
 800137e:	2307      	movs	r3, #7
 8001380:	e00e      	b.n	80013a0 <HAL_GPIO_Init+0x228>
 8001382:	2308      	movs	r3, #8
 8001384:	e00c      	b.n	80013a0 <HAL_GPIO_Init+0x228>
 8001386:	2306      	movs	r3, #6
 8001388:	e00a      	b.n	80013a0 <HAL_GPIO_Init+0x228>
 800138a:	2305      	movs	r3, #5
 800138c:	e008      	b.n	80013a0 <HAL_GPIO_Init+0x228>
 800138e:	2304      	movs	r3, #4
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x228>
 8001392:	2303      	movs	r3, #3
 8001394:	e004      	b.n	80013a0 <HAL_GPIO_Init+0x228>
 8001396:	2302      	movs	r3, #2
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_Init+0x228>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x228>
 800139e:	2300      	movs	r3, #0
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	f002 0203 	and.w	r2, r2, #3
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	4093      	lsls	r3, r2
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b0:	4935      	ldr	r1, [pc, #212]	; (8001488 <HAL_GPIO_Init+0x310>)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <HAL_GPIO_Init+0x334>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e2:	4a32      	ldr	r2, [pc, #200]	; (80014ac <HAL_GPIO_Init+0x334>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013e8:	4b30      	ldr	r3, [pc, #192]	; (80014ac <HAL_GPIO_Init+0x334>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140c:	4a27      	ldr	r2, [pc, #156]	; (80014ac <HAL_GPIO_Init+0x334>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_GPIO_Init+0x334>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001436:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_GPIO_Init+0x334>)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_GPIO_Init+0x334>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <HAL_GPIO_Init+0x334>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3301      	adds	r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	2b0f      	cmp	r3, #15
 8001470:	f67f ae90 	bls.w	8001194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40013800 	.word	0x40013800
 800148c:	40020000 	.word	0x40020000
 8001490:	40020400 	.word	0x40020400
 8001494:	40020800 	.word	0x40020800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	40021000 	.word	0x40021000
 80014a0:	40021400 	.word	0x40021400
 80014a4:	40021800 	.word	0x40021800
 80014a8:	40021c00 	.word	0x40021c00
 80014ac:	40013c00 	.word	0x40013c00

080014b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e001      	b.n	80014d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	041a      	lsls	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f878 	bl	8000628 <HAL_GPIO_EXTI_Callback>
  }
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	b08f      	sub	sp, #60	; 0x3c
 8001548:	af0a      	add	r7, sp, #40	; 0x28
 800154a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e054      	b.n	8001600 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d106      	bne.n	8001576 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f006 f995 	bl	80078a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2203      	movs	r2, #3
 800157a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fb37 	bl	8004c08 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	687e      	ldr	r6, [r7, #4]
 80015a2:	466d      	mov	r5, sp
 80015a4:	f106 0410 	add.w	r4, r6, #16
 80015a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015b8:	1d33      	adds	r3, r6, #4
 80015ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	f003 fab1 	bl	8004b24 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2101      	movs	r1, #1
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fb2e 	bl	8004c2a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	687e      	ldr	r6, [r7, #4]
 80015d6:	466d      	mov	r5, sp
 80015d8:	f106 0410 	add.w	r4, r6, #16
 80015dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ec:	1d33      	adds	r3, r6, #4
 80015ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f0:	6838      	ldr	r0, [r7, #0]
 80015f2:	f003 fc41 	bl	8004e78 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001608 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af04      	add	r7, sp, #16
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4608      	mov	r0, r1
 8001612:	4611      	mov	r1, r2
 8001614:	461a      	mov	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	70fb      	strb	r3, [r7, #3]
 800161a:	460b      	mov	r3, r1
 800161c:	70bb      	strb	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_HCD_HC_Init+0x28>
 800162c:	2302      	movs	r3, #2
 800162e:	e076      	b.n	800171e <HAL_HCD_HC_Init+0x116>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	212c      	movs	r1, #44	; 0x2c
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4413      	add	r3, r2
 8001644:	333d      	adds	r3, #61	; 0x3d
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	212c      	movs	r1, #44	; 0x2c
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	3338      	adds	r3, #56	; 0x38
 8001658:	787a      	ldrb	r2, [r7, #1]
 800165a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	212c      	movs	r1, #44	; 0x2c
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	4413      	add	r3, r2
 8001668:	3340      	adds	r3, #64	; 0x40
 800166a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800166c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	212c      	movs	r1, #44	; 0x2c
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	4413      	add	r3, r2
 800167a:	3339      	adds	r3, #57	; 0x39
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	212c      	movs	r1, #44	; 0x2c
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4413      	add	r3, r2
 800168c:	333f      	adds	r3, #63	; 0x3f
 800168e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001692:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	78ba      	ldrb	r2, [r7, #2]
 8001698:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800169c:	b2d0      	uxtb	r0, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	333a      	adds	r3, #58	; 0x3a
 80016aa:	4602      	mov	r2, r0
 80016ac:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da09      	bge.n	80016ca <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	333b      	adds	r3, #59	; 0x3b
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e008      	b.n	80016dc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	212c      	movs	r1, #44	; 0x2c
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	333b      	adds	r3, #59	; 0x3b
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	212c      	movs	r1, #44	; 0x2c
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	333c      	adds	r3, #60	; 0x3c
 80016ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016ee:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	787c      	ldrb	r4, [r7, #1]
 80016f6:	78ba      	ldrb	r2, [r7, #2]
 80016f8:	78f9      	ldrb	r1, [r7, #3]
 80016fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	4623      	mov	r3, r4
 800170c:	f003 fd36 	bl	800517c <USB_HC_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bd90      	pop	{r4, r7, pc}

08001726 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_HCD_HC_Halt+0x1e>
 8001740:	2302      	movs	r3, #2
 8001742:	e00f      	b.n	8001764 <HAL_HCD_HC_Halt+0x3e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f003 ff72 	bl	800563e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	70fb      	strb	r3, [r7, #3]
 800177e:	460b      	mov	r3, r1
 8001780:	70bb      	strb	r3, [r7, #2]
 8001782:	4613      	mov	r3, r2
 8001784:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	212c      	movs	r1, #44	; 0x2c
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	333b      	adds	r3, #59	; 0x3b
 8001794:	78ba      	ldrb	r2, [r7, #2]
 8001796:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	333f      	adds	r3, #63	; 0x3f
 80017a6:	787a      	ldrb	r2, [r7, #1]
 80017a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017aa:	7c3b      	ldrb	r3, [r7, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d112      	bne.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	3342      	adds	r3, #66	; 0x42
 80017be:	2203      	movs	r2, #3
 80017c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	212c      	movs	r1, #44	; 0x2c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	333d      	adds	r3, #61	; 0x3d
 80017d0:	7f3a      	ldrb	r2, [r7, #28]
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e008      	b.n	80017e8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	212c      	movs	r1, #44	; 0x2c
 80017dc:	fb01 f303 	mul.w	r3, r1, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	3342      	adds	r3, #66	; 0x42
 80017e4:	2202      	movs	r2, #2
 80017e6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	f200 80c6 	bhi.w	800197c <HAL_HCD_HC_SubmitRequest+0x210>
 80017f0:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f6:	bf00      	nop
 80017f8:	08001809 	.word	0x08001809
 80017fc:	08001969 	.word	0x08001969
 8001800:	0800186d 	.word	0x0800186d
 8001804:	080018eb 	.word	0x080018eb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001808:	7c3b      	ldrb	r3, [r7, #16]
 800180a:	2b01      	cmp	r3, #1
 800180c:	f040 80b8 	bne.w	8001980 <HAL_HCD_HC_SubmitRequest+0x214>
 8001810:	78bb      	ldrb	r3, [r7, #2]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 80b4 	bne.w	8001980 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001818:	8b3b      	ldrh	r3, [r7, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d108      	bne.n	8001830 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3355      	adds	r3, #85	; 0x55
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3355      	adds	r3, #85	; 0x55
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	212c      	movs	r1, #44	; 0x2c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	3342      	adds	r3, #66	; 0x42
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001856:	e093      	b.n	8001980 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	3342      	adds	r3, #66	; 0x42
 8001866:	2202      	movs	r2, #2
 8001868:	701a      	strb	r2, [r3, #0]
      break;
 800186a:	e089      	b.n	8001980 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d11d      	bne.n	80018ae <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	212c      	movs	r1, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	3355      	adds	r3, #85	; 0x55
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	212c      	movs	r1, #44	; 0x2c
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	4413      	add	r3, r2
 8001892:	3342      	adds	r3, #66	; 0x42
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001898:	e073      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3342      	adds	r3, #66	; 0x42
 80018a8:	2202      	movs	r2, #2
 80018aa:	701a      	strb	r2, [r3, #0]
      break;
 80018ac:	e069      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	3354      	adds	r3, #84	; 0x54
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	212c      	movs	r1, #44	; 0x2c
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3342      	adds	r3, #66	; 0x42
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
      break;
 80018d4:	e055      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	212c      	movs	r1, #44	; 0x2c
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	3342      	adds	r3, #66	; 0x42
 80018e4:	2202      	movs	r2, #2
 80018e6:	701a      	strb	r2, [r3, #0]
      break;
 80018e8:	e04b      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018ea:	78bb      	ldrb	r3, [r7, #2]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d11d      	bne.n	800192c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3355      	adds	r3, #85	; 0x55
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d109      	bne.n	8001918 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	212c      	movs	r1, #44	; 0x2c
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	3342      	adds	r3, #66	; 0x42
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001916:	e034      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	212c      	movs	r1, #44	; 0x2c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	3342      	adds	r3, #66	; 0x42
 8001926:	2202      	movs	r2, #2
 8001928:	701a      	strb	r2, [r3, #0]
      break;
 800192a:	e02a      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	212c      	movs	r1, #44	; 0x2c
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	3354      	adds	r3, #84	; 0x54
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	212c      	movs	r1, #44	; 0x2c
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	3342      	adds	r3, #66	; 0x42
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
      break;
 8001952:	e016      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	212c      	movs	r1, #44	; 0x2c
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	3342      	adds	r3, #66	; 0x42
 8001962:	2202      	movs	r2, #2
 8001964:	701a      	strb	r2, [r3, #0]
      break;
 8001966:	e00c      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	3342      	adds	r3, #66	; 0x42
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
      break;
 800197a:	e002      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800197c:	bf00      	nop
 800197e:	e000      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001980:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	212c      	movs	r1, #44	; 0x2c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	3344      	adds	r3, #68	; 0x44
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	8b3a      	ldrh	r2, [r7, #24]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	202c      	movs	r0, #44	; 0x2c
 800199c:	fb00 f303 	mul.w	r3, r0, r3
 80019a0:	440b      	add	r3, r1
 80019a2:	334c      	adds	r3, #76	; 0x4c
 80019a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	212c      	movs	r1, #44	; 0x2c
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	3360      	adds	r3, #96	; 0x60
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3350      	adds	r3, #80	; 0x50
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	212c      	movs	r1, #44	; 0x2c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3339      	adds	r3, #57	; 0x39
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	3361      	adds	r3, #97	; 0x61
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	222c      	movs	r2, #44	; 0x2c
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	3338      	adds	r3, #56	; 0x38
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	18d1      	adds	r1, r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	f003 fcc6 	bl	8005398 <USB_HC_StartXfer>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop

08001a18 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 f9df 	bl	8004df2 <USB_GetMode>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	f040 80ef 	bne.w	8001c1a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 f9c3 	bl	8004dcc <USB_ReadInterrupts>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80e5 	beq.w	8001c18 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 f9ba 	bl	8004dcc <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a62:	d104      	bne.n	8001a6e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 f9aa 	bl	8004dcc <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a82:	d104      	bne.n	8001a8e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 f99a 	bl	8004dcc <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001aa2:	d104      	bne.n	8001aae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 f98a 	bl	8004dcc <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d103      	bne.n	8001aca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 f97c 	bl	8004dcc <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ade:	d115      	bne.n	8001b0c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ae8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d108      	bne.n	8001b0c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f005 ff4e 	bl	800799c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fa72 	bl	8004ff0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 f95b 	bl	8004dcc <USB_ReadInterrupts>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b20:	d102      	bne.n	8001b28 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f001 f9ff 	bl	8002f26 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 f94d 	bl	8004dcc <USB_ReadInterrupts>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d106      	bne.n	8001b4a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f005 ff11 	bl	8007964 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2208      	movs	r2, #8
 8001b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 f93c 	bl	8004dcc <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d101      	bne.n	8001b62 <HAL_HCD_IRQHandler+0x14a>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_HCD_IRQHandler+0x14c>
 8001b62:	2300      	movs	r3, #0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d012      	beq.n	8001b8e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0210 	bic.w	r2, r2, #16
 8001b76:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f001 f902 	bl	8002d82 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0210 	orr.w	r2, r2, #16
 8001b8c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 f91a 	bl	8004dcc <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ba2:	d13a      	bne.n	8001c1a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fd37 	bl	800561c <USB_HC_ReadInterrupt>
 8001bae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e025      	b.n	8001c02 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d018      	beq.n	8001bfc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001be0:	d106      	bne.n	8001bf0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4619      	mov	r1, r3
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8ab 	bl	8001d44 <HCD_HC_IN_IRQHandler>
 8001bee:	e005      	b.n	8001bfc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fcc6 	bl	8002588 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d3d4      	bcc.n	8001bb6 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c14:	615a      	str	r2, [r3, #20]
 8001c16:	e000      	b.n	8001c1a <HAL_HCD_IRQHandler+0x202>
      return;
 8001c18:	bf00      	nop
    }
  }
}
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_HCD_Start+0x16>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e013      	b.n	8001c5e <HAL_HCD_Start+0x3e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 ffcf 	bl	8004be6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fa32 	bl	80050b8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_HCD_Stop+0x16>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e00d      	b.n	8001c98 <HAL_HCD_Stop+0x32>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fe31 	bl	80058f0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 f9d9 	bl	8005064 <USB_ResetPort>
 8001cb2:	4603      	mov	r3, r0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3360      	adds	r3, #96	; 0x60
 8001cd6:	781b      	ldrb	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3350      	adds	r3, #80	; 0x50
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fa1d 	bl	8005158 <USB_GetCurrentFrame>
 8001d1e:	4603      	mov	r3, r0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 f9f8 	bl	800512a <USB_GetHostSpeed>
 8001d3a:	4603      	mov	r3, r0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d119      	bne.n	8001da8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d80:	461a      	mov	r2, r3
 8001d82:	2304      	movs	r3, #4
 8001d84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	0151      	lsls	r1, r2, #5
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	440a      	add	r2, r1
 8001d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	60d3      	str	r3, [r2, #12]
 8001da6:	e101      	b.n	8001fac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dbe:	d12b      	bne.n	8001e18 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	212c      	movs	r1, #44	; 0x2c
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	3361      	adds	r3, #97	; 0x61
 8001de2:	2207      	movs	r2, #7
 8001de4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	0151      	lsls	r1, r2, #5
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	440a      	add	r2, r1
 8001dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 fc14 	bl	800563e <USB_HC_Halt>
 8001e16:	e0c9      	b.n	8001fac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d109      	bne.n	8001e42 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	6093      	str	r3, [r2, #8]
 8001e40:	e0b4      	b.n	8001fac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d133      	bne.n	8001ec0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	0151      	lsls	r1, r2, #5
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	440a      	add	r2, r1
 8001e6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	212c      	movs	r1, #44	; 0x2c
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	3361      	adds	r3, #97	; 0x61
 8001e86:	2205      	movs	r2, #5
 8001e88:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	461a      	mov	r2, r3
 8001e98:	2310      	movs	r3, #16
 8001e9a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2308      	movs	r3, #8
 8001eac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 fbc0 	bl	800563e <USB_HC_Halt>
 8001ebe:	e075      	b.n	8001fac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed6:	d134      	bne.n	8001f42 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	0151      	lsls	r1, r2, #5
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	440a      	add	r2, r1
 8001eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	212c      	movs	r1, #44	; 0x2c
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	3361      	adds	r3, #97	; 0x61
 8001f06:	2208      	movs	r2, #8
 8001f08:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	461a      	mov	r2, r3
 8001f18:	2310      	movs	r3, #16
 8001f1a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fb7f 	bl	800563e <USB_HC_Halt>
 8001f40:	e034      	b.n	8001fac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d129      	bne.n	8001fac <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	0151      	lsls	r1, r2, #5
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	440a      	add	r2, r1
 8001f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	212c      	movs	r1, #44	; 0x2c
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	3361      	adds	r3, #97	; 0x61
 8001f86:	2206      	movs	r2, #6
 8001f88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 fb52 	bl	800563e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc2:	d122      	bne.n	800200a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	0151      	lsls	r1, r2, #5
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	440a      	add	r2, r1
 8001fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fb25 	bl	800563e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002006:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002008:	e2ba      	b.n	8002580 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	f040 811b 	bne.w	8002258 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d019      	beq.n	800205e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3348      	adds	r3, #72	; 0x48
 8002038:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	0159      	lsls	r1, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	440b      	add	r3, r1
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800204c:	1ad2      	subs	r2, r2, r3
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	202c      	movs	r0, #44	; 0x2c
 8002054:	fb00 f303 	mul.w	r3, r0, r3
 8002058:	440b      	add	r3, r1
 800205a:	3350      	adds	r3, #80	; 0x50
 800205c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	212c      	movs	r1, #44	; 0x2c
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	3361      	adds	r3, #97	; 0x61
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	335c      	adds	r3, #92	; 0x5c
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4413      	add	r3, r2
 800208a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208e:	461a      	mov	r2, r3
 8002090:	2301      	movs	r3, #1
 8002092:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	333f      	adds	r3, #63	; 0x3f
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d009      	beq.n	80020bc <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	333f      	adds	r3, #63	; 0x3f
 80020b6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d121      	bne.n	8002100 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	0151      	lsls	r1, r2, #5
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	440a      	add	r2, r1
 80020d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020d6:	f043 0302 	orr.w	r3, r3, #2
 80020da:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 faa9 	bl	800563e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	461a      	mov	r2, r3
 80020fa:	2310      	movs	r3, #16
 80020fc:	6093      	str	r3, [r2, #8]
 80020fe:	e066      	b.n	80021ce <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	212c      	movs	r1, #44	; 0x2c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	333f      	adds	r3, #63	; 0x3f
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d127      	bne.n	8002164 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	0151      	lsls	r1, r2, #5
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	440a      	add	r2, r1
 800212a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800212e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002132:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	b2d9      	uxtb	r1, r3
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	202c      	movs	r0, #44	; 0x2c
 8002150:	fb00 f303 	mul.w	r3, r0, r3
 8002154:	4413      	add	r3, r2
 8002156:	3360      	adds	r3, #96	; 0x60
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f005 fc2b 	bl	80079b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002162:	e034      	b.n	80021ce <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	333f      	adds	r3, #63	; 0x3f
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d12a      	bne.n	80021ce <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	3360      	adds	r3, #96	; 0x60
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3354      	adds	r3, #84	; 0x54
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	f083 0301 	eor.w	r3, r3, #1
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	3354      	adds	r3, #84	; 0x54
 80021ae:	4602      	mov	r2, r0
 80021b0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	b2d9      	uxtb	r1, r3
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	202c      	movs	r0, #44	; 0x2c
 80021bc:	fb00 f303 	mul.w	r3, r0, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	3360      	adds	r3, #96	; 0x60
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f005 fbf5 	bl	80079b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d12b      	bne.n	800222e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3348      	adds	r3, #72	; 0x48
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	202c      	movs	r0, #44	; 0x2c
 80021ec:	fb00 f202 	mul.w	r2, r0, r2
 80021f0:	440a      	add	r2, r1
 80021f2:	3240      	adds	r2, #64	; 0x40
 80021f4:	8812      	ldrh	r2, [r2, #0]
 80021f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 81be 	beq.w	8002580 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	3354      	adds	r3, #84	; 0x54
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	f083 0301 	eor.w	r3, r3, #1
 8002218:	b2d8      	uxtb	r0, r3
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	3354      	adds	r3, #84	; 0x54
 8002228:	4602      	mov	r2, r0
 800222a:	701a      	strb	r2, [r3, #0]
}
 800222c:	e1a8      	b.n	8002580 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	3354      	adds	r3, #84	; 0x54
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	f083 0301 	eor.w	r3, r3, #1
 8002242:	b2d8      	uxtb	r0, r3
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3354      	adds	r3, #84	; 0x54
 8002252:	4602      	mov	r2, r0
 8002254:	701a      	strb	r2, [r3, #0]
}
 8002256:	e193      	b.n	8002580 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	f040 8106 	bne.w	800247c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	0151      	lsls	r1, r2, #5
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	440a      	add	r2, r1
 8002286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800228a:	f023 0302 	bic.w	r3, r3, #2
 800228e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3361      	adds	r3, #97	; 0x61
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d109      	bne.n	80022b8 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	212c      	movs	r1, #44	; 0x2c
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	3360      	adds	r3, #96	; 0x60
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e0c9      	b.n	800244c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3361      	adds	r3, #97	; 0x61
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d109      	bne.n	80022e0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	3360      	adds	r3, #96	; 0x60
 80022da:	2205      	movs	r2, #5
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e0b5      	b.n	800244c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3361      	adds	r3, #97	; 0x61
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d009      	beq.n	8002308 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3361      	adds	r3, #97	; 0x61
 8002302:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002304:	2b08      	cmp	r3, #8
 8002306:	d150      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	335c      	adds	r3, #92	; 0x5c
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	202c      	movs	r0, #44	; 0x2c
 8002320:	fb00 f303 	mul.w	r3, r0, r3
 8002324:	440b      	add	r3, r1
 8002326:	335c      	adds	r3, #92	; 0x5c
 8002328:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	335c      	adds	r3, #92	; 0x5c
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d912      	bls.n	8002364 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	335c      	adds	r3, #92	; 0x5c
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3360      	adds	r3, #96	; 0x60
 800235e:	2204      	movs	r2, #4
 8002360:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002362:	e073      	b.n	800244c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3360      	adds	r3, #96	; 0x60
 8002372:	2202      	movs	r2, #2
 8002374:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4413      	add	r3, r2
 800237e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800238c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002394:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023a8:	e050      	b.n	800244c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3361      	adds	r3, #97	; 0x61
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d122      	bne.n	8002404 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3360      	adds	r3, #96	; 0x60
 80023cc:	2202      	movs	r2, #2
 80023ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	461a      	mov	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e023      	b.n	800244c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3361      	adds	r3, #97	; 0x61
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b07      	cmp	r3, #7
 8002416:	d119      	bne.n	800244c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	335c      	adds	r3, #92	; 0x5c
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	202c      	movs	r0, #44	; 0x2c
 8002430:	fb00 f303 	mul.w	r3, r0, r3
 8002434:	440b      	add	r3, r1
 8002436:	335c      	adds	r3, #92	; 0x5c
 8002438:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	3360      	adds	r3, #96	; 0x60
 8002448:	2204      	movs	r2, #4
 800244a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	2302      	movs	r3, #2
 800245c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	b2d9      	uxtb	r1, r3
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	202c      	movs	r0, #44	; 0x2c
 8002468:	fb00 f303 	mul.w	r3, r0, r3
 800246c:	4413      	add	r3, r2
 800246e:	3360      	adds	r3, #96	; 0x60
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f005 fa9f 	bl	80079b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800247a:	e081      	b.n	8002580 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b10      	cmp	r3, #16
 8002490:	d176      	bne.n	8002580 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	333f      	adds	r3, #63	; 0x3f
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d121      	bne.n	80024ea <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	335c      	adds	r3, #92	; 0x5c
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	0151      	lsls	r1, r2, #5
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	440a      	add	r2, r1
 80024ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d2:	f043 0302 	orr.w	r3, r3, #2
 80024d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 f8ab 	bl	800563e <USB_HC_Halt>
 80024e8:	e041      	b.n	800256e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	333f      	adds	r3, #63	; 0x3f
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	333f      	adds	r3, #63	; 0x3f
 800250c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800250e:	2b02      	cmp	r3, #2
 8002510:	d12d      	bne.n	800256e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	335c      	adds	r3, #92	; 0x5c
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d120      	bne.n	800256e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3361      	adds	r3, #97	; 0x61
 800253a:	2203      	movs	r2, #3
 800253c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	0151      	lsls	r1, r2, #5
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	440a      	add	r2, r1
 8002554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f003 f868 	bl	800563e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	461a      	mov	r2, r3
 800257c:	2310      	movs	r3, #16
 800257e:	6093      	str	r3, [r2, #8]
}
 8002580:	bf00      	nop
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d119      	bne.n	80025ec <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	2304      	movs	r3, #4
 80025c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	0151      	lsls	r1, r2, #5
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	440a      	add	r2, r1
 80025e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80025ea:	e3c6      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d13e      	bne.n	8002680 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	461a      	mov	r2, r3
 8002610:	2320      	movs	r3, #32
 8002612:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	212c      	movs	r1, #44	; 0x2c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	333d      	adds	r3, #61	; 0x3d
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	f040 83a8 	bne.w	8002d7a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	333d      	adds	r3, #61	; 0x3d
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3360      	adds	r3, #96	; 0x60
 800264a:	2202      	movs	r2, #2
 800264c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	0151      	lsls	r1, r2, #5
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	440a      	add	r2, r1
 8002664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f002 ffe0 	bl	800563e <USB_HC_Halt>
}
 800267e:	e37c      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002696:	d122      	bne.n	80026de <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	0151      	lsls	r1, r2, #5
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	440a      	add	r2, r1
 80026ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 ffbb 	bl	800563e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	461a      	mov	r2, r3
 80026d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026da:	6093      	str	r3, [r2, #8]
}
 80026dc:	e34d      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d150      	bne.n	8002796 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	335c      	adds	r3, #92	; 0x5c
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d111      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	333d      	adds	r3, #61	; 0x3d
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	461a      	mov	r2, r3
 800273c:	2340      	movs	r3, #64	; 0x40
 800273e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	0151      	lsls	r1, r2, #5
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	440a      	add	r2, r1
 8002756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275a:	f043 0302 	orr.w	r3, r3, #2
 800275e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f002 ff67 	bl	800563e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	461a      	mov	r2, r3
 800277e:	2301      	movs	r3, #1
 8002780:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	3361      	adds	r3, #97	; 0x61
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
}
 8002794:	e2f1      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d13c      	bne.n	8002826 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	212c      	movs	r1, #44	; 0x2c
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	3361      	adds	r3, #97	; 0x61
 80027ba:	2204      	movs	r2, #4
 80027bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	333d      	adds	r3, #61	; 0x3d
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	335c      	adds	r3, #92	; 0x5c
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	0151      	lsls	r1, r2, #5
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	440a      	add	r2, r1
 80027f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f002 ff16 	bl	800563e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281e:	461a      	mov	r2, r3
 8002820:	2340      	movs	r3, #64	; 0x40
 8002822:	6093      	str	r3, [r2, #8]
}
 8002824:	e2a9      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4413      	add	r3, r2
 800282e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b08      	cmp	r3, #8
 800283a:	d12a      	bne.n	8002892 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	461a      	mov	r2, r3
 800284a:	2308      	movs	r3, #8
 800284c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	0151      	lsls	r1, r2, #5
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	440a      	add	r2, r1
 8002864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f002 fee0 	bl	800563e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3361      	adds	r3, #97	; 0x61
 800288c:	2205      	movs	r2, #5
 800288e:	701a      	strb	r2, [r3, #0]
}
 8002890:	e273      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	d150      	bne.n	800294a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	335c      	adds	r3, #92	; 0x5c
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3361      	adds	r3, #97	; 0x61
 80028c8:	2203      	movs	r2, #3
 80028ca:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	333d      	adds	r3, #61	; 0x3d
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d112      	bne.n	8002906 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	333c      	adds	r3, #60	; 0x3c
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d108      	bne.n	8002906 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	333d      	adds	r3, #61	; 0x3d
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	0151      	lsls	r1, r2, #5
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	440a      	add	r2, r1
 800291c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f002 fe84 	bl	800563e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	461a      	mov	r2, r3
 8002944:	2310      	movs	r3, #16
 8002946:	6093      	str	r3, [r2, #8]
}
 8002948:	e217      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d174      	bne.n	8002a4a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d121      	bne.n	80029ac <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3361      	adds	r3, #97	; 0x61
 8002976:	2206      	movs	r2, #6
 8002978:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	0151      	lsls	r1, r2, #5
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	440a      	add	r2, r1
 8002990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 fe4a 	bl	800563e <USB_HC_Halt>
 80029aa:	e044      	b.n	8002a36 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	335c      	adds	r3, #92	; 0x5c
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	202c      	movs	r0, #44	; 0x2c
 80029c4:	fb00 f303 	mul.w	r3, r0, r3
 80029c8:	440b      	add	r3, r1
 80029ca:	335c      	adds	r3, #92	; 0x5c
 80029cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	335c      	adds	r3, #92	; 0x5c
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d920      	bls.n	8002a24 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	335c      	adds	r3, #92	; 0x5c
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3360      	adds	r3, #96	; 0x60
 8002a02:	2204      	movs	r2, #4
 8002a04:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	b2d9      	uxtb	r1, r3
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	202c      	movs	r0, #44	; 0x2c
 8002a10:	fb00 f303 	mul.w	r3, r0, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	3360      	adds	r3, #96	; 0x60
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f004 ffcb 	bl	80079b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a22:	e008      	b.n	8002a36 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3360      	adds	r3, #96	; 0x60
 8002a32:	2202      	movs	r2, #2
 8002a34:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	461a      	mov	r2, r3
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	6093      	str	r3, [r2, #8]
}
 8002a48:	e197      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a60:	d134      	bne.n	8002acc <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	0151      	lsls	r1, r2, #5
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	440a      	add	r2, r1
 8002a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 fdd6 	bl	800563e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3361      	adds	r3, #97	; 0x61
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	701a      	strb	r2, [r3, #0]
}
 8002aca:	e156      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	f040 814b 	bne.w	8002d7a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	0151      	lsls	r1, r2, #5
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	440a      	add	r2, r1
 8002afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002afe:	f023 0302 	bic.w	r3, r3, #2
 8002b02:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3361      	adds	r3, #97	; 0x61
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d179      	bne.n	8002c0c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3360      	adds	r3, #96	; 0x60
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	333f      	adds	r3, #63	; 0x3f
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d00a      	beq.n	8002b54 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	333f      	adds	r3, #63	; 0x3f
 8002b4c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	f040 80fc 	bne.w	8002d4c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d142      	bne.n	8002be2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	334c      	adds	r3, #76	; 0x4c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80ed 	beq.w	8002d4c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	334c      	adds	r3, #76	; 0x4c
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	202c      	movs	r0, #44	; 0x2c
 8002b88:	fb00 f202 	mul.w	r2, r0, r2
 8002b8c:	440a      	add	r2, r1
 8002b8e:	3240      	adds	r2, #64	; 0x40
 8002b90:	8812      	ldrh	r2, [r2, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	3b01      	subs	r3, #1
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	202c      	movs	r0, #44	; 0x2c
 8002b9c:	fb00 f202 	mul.w	r2, r0, r2
 8002ba0:	440a      	add	r2, r1
 8002ba2:	3240      	adds	r2, #64	; 0x40
 8002ba4:	8812      	ldrh	r2, [r2, #0]
 8002ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80ca 	beq.w	8002d4c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3355      	adds	r3, #85	; 0x55
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	f083 0301 	eor.w	r3, r3, #1
 8002bcc:	b2d8      	uxtb	r0, r3
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3355      	adds	r3, #85	; 0x55
 8002bdc:	4602      	mov	r2, r0
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e0b4      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3355      	adds	r3, #85	; 0x55
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f083 0301 	eor.w	r3, r3, #1
 8002bf6:	b2d8      	uxtb	r0, r3
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3355      	adds	r3, #85	; 0x55
 8002c06:	4602      	mov	r2, r0
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e09f      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	3361      	adds	r3, #97	; 0x61
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d109      	bne.n	8002c34 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3360      	adds	r3, #96	; 0x60
 8002c2e:	2202      	movs	r2, #2
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e08b      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	3361      	adds	r3, #97	; 0x61
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d109      	bne.n	8002c5c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3360      	adds	r3, #96	; 0x60
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e077      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3361      	adds	r3, #97	; 0x61
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	d109      	bne.n	8002c84 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3360      	adds	r3, #96	; 0x60
 8002c7e:	2205      	movs	r2, #5
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	e063      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3361      	adds	r3, #97	; 0x61
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d009      	beq.n	8002cac <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3361      	adds	r3, #97	; 0x61
 8002ca6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d14f      	bne.n	8002d4c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	335c      	adds	r3, #92	; 0x5c
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	202c      	movs	r0, #44	; 0x2c
 8002cc4:	fb00 f303 	mul.w	r3, r0, r3
 8002cc8:	440b      	add	r3, r1
 8002cca:	335c      	adds	r3, #92	; 0x5c
 8002ccc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	335c      	adds	r3, #92	; 0x5c
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d912      	bls.n	8002d08 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	335c      	adds	r3, #92	; 0x5c
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3360      	adds	r3, #96	; 0x60
 8002d02:	2204      	movs	r2, #4
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e021      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3360      	adds	r3, #96	; 0x60
 8002d16:	2202      	movs	r2, #2
 8002d18:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d30:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d38:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	b2d9      	uxtb	r1, r3
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	202c      	movs	r0, #44	; 0x2c
 8002d68:	fb00 f303 	mul.w	r3, r0, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3360      	adds	r3, #96	; 0x60
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f004 fe1f 	bl	80079b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d7a:	bf00      	nop
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b08a      	sub	sp, #40	; 0x28
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	0c5b      	lsrs	r3, r3, #17
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002db6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d004      	beq.n	8002dc8 <HCD_RXQLVL_IRQHandler+0x46>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b05      	cmp	r3, #5
 8002dc2:	f000 80a9 	beq.w	8002f18 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002dc6:	e0aa      	b.n	8002f1e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80a6 	beq.w	8002f1c <HCD_RXQLVL_IRQHandler+0x19a>
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3344      	adds	r3, #68	; 0x44
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 809b 	beq.w	8002f1c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	3350      	adds	r3, #80	; 0x50
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	441a      	add	r2, r3
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	202c      	movs	r0, #44	; 0x2c
 8002e00:	fb00 f303 	mul.w	r3, r0, r3
 8002e04:	440b      	add	r3, r1
 8002e06:	334c      	adds	r3, #76	; 0x4c
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d87a      	bhi.n	8002f04 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3344      	adds	r3, #68	; 0x44
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	b292      	uxth	r2, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	f001 ffa7 	bl	8004d7a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3344      	adds	r3, #68	; 0x44
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	441a      	add	r2, r3
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	202c      	movs	r0, #44	; 0x2c
 8002e46:	fb00 f303 	mul.w	r3, r0, r3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3344      	adds	r3, #68	; 0x44
 8002e4e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3350      	adds	r3, #80	; 0x50
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	441a      	add	r2, r3
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	202c      	movs	r0, #44	; 0x2c
 8002e6a:	fb00 f303 	mul.w	r3, r0, r3
 8002e6e:	440b      	add	r3, r1
 8002e70:	3350      	adds	r3, #80	; 0x50
 8002e72:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	0cdb      	lsrs	r3, r3, #19
 8002e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e88:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3340      	adds	r3, #64	; 0x40
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d13c      	bne.n	8002f1c <HCD_RXQLVL_IRQHandler+0x19a>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d039      	beq.n	8002f1c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ebe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ec6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3354      	adds	r3, #84	; 0x54
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f083 0301 	eor.w	r3, r3, #1
 8002eee:	b2d8      	uxtb	r0, r3
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	212c      	movs	r1, #44	; 0x2c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	3354      	adds	r3, #84	; 0x54
 8002efe:	4602      	mov	r2, r0
 8002f00:	701a      	strb	r2, [r3, #0]
      break;
 8002f02:	e00b      	b.n	8002f1c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3360      	adds	r3, #96	; 0x60
 8002f12:	2204      	movs	r2, #4
 8002f14:	701a      	strb	r2, [r3, #0]
      break;
 8002f16:	e001      	b.n	8002f1c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f18:	bf00      	nop
 8002f1a:	e000      	b.n	8002f1e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f1c:	bf00      	nop
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f52:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d10b      	bne.n	8002f76 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d102      	bne.n	8002f6e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f004 fd09 	bl	8007980 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d132      	bne.n	8002fe6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f043 0308 	orr.w	r3, r3, #8
 8002f86:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d126      	bne.n	8002fe0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d113      	bne.n	8002fc2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fa4:	d106      	bne.n	8002fb4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2102      	movs	r1, #2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 f81f 	bl	8004ff0 <USB_InitFSLSPClkSel>
 8002fb2:	e011      	b.n	8002fd8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f002 f818 	bl	8004ff0 <USB_InitFSLSPClkSel>
 8002fc0:	e00a      	b.n	8002fd8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d106      	bne.n	8002fd8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fd6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f004 fcfb 	bl	80079d4 <HAL_HCD_PortEnabled_Callback>
 8002fde:	e002      	b.n	8002fe6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f004 fd05 	bl	80079f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d103      	bne.n	8002ff8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f043 0320 	orr.w	r3, r3, #32
 8002ff6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ffe:	461a      	mov	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e12b      	b.n	8003276 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fd30 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	; 0x24
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800305e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800306e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003070:	f001 f9fc 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 8003074:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a81      	ldr	r2, [pc, #516]	; (8003280 <HAL_I2C_Init+0x274>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d807      	bhi.n	8003090 <HAL_I2C_Init+0x84>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a80      	ldr	r2, [pc, #512]	; (8003284 <HAL_I2C_Init+0x278>)
 8003084:	4293      	cmp	r3, r2
 8003086:	bf94      	ite	ls
 8003088:	2301      	movls	r3, #1
 800308a:	2300      	movhi	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e006      	b.n	800309e <HAL_I2C_Init+0x92>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a7d      	ldr	r2, [pc, #500]	; (8003288 <HAL_I2C_Init+0x27c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	bf94      	ite	ls
 8003098:	2301      	movls	r3, #1
 800309a:	2300      	movhi	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0e7      	b.n	8003276 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4a78      	ldr	r2, [pc, #480]	; (800328c <HAL_I2C_Init+0x280>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	0c9b      	lsrs	r3, r3, #18
 80030b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a6a      	ldr	r2, [pc, #424]	; (8003280 <HAL_I2C_Init+0x274>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d802      	bhi.n	80030e0 <HAL_I2C_Init+0xd4>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3301      	adds	r3, #1
 80030de:	e009      	b.n	80030f4 <HAL_I2C_Init+0xe8>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	4a69      	ldr	r2, [pc, #420]	; (8003290 <HAL_I2C_Init+0x284>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	3301      	adds	r3, #1
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003106:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	495c      	ldr	r1, [pc, #368]	; (8003280 <HAL_I2C_Init+0x274>)
 8003110:	428b      	cmp	r3, r1
 8003112:	d819      	bhi.n	8003148 <HAL_I2C_Init+0x13c>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e59      	subs	r1, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003122:	1c59      	adds	r1, r3, #1
 8003124:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003128:	400b      	ands	r3, r1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_I2C_Init+0x138>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e59      	subs	r1, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fbb1 f3f3 	udiv	r3, r1, r3
 800313c:	3301      	adds	r3, #1
 800313e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003142:	e051      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 8003144:	2304      	movs	r3, #4
 8003146:	e04f      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d111      	bne.n	8003174 <HAL_I2C_Init+0x168>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1e58      	subs	r0, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e012      	b.n	800319a <HAL_I2C_Init+0x18e>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e58      	subs	r0, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	0099      	lsls	r1, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	fbb0 f3f3 	udiv	r3, r0, r3
 800318a:	3301      	adds	r3, #1
 800318c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Init+0x196>
 800319e:	2301      	movs	r3, #1
 80031a0:	e022      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10e      	bne.n	80031c8 <HAL_I2C_Init+0x1bc>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1e58      	subs	r0, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	460b      	mov	r3, r1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	440b      	add	r3, r1
 80031b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c6:	e00f      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e58      	subs	r0, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	0099      	lsls	r1, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	fbb0 f3f3 	udiv	r3, r0, r3
 80031de:	3301      	adds	r3, #1
 80031e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	6809      	ldr	r1, [r1, #0]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6911      	ldr	r1, [r2, #16]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68d2      	ldr	r2, [r2, #12]
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	430b      	orrs	r3, r1
 800322a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	000186a0 	.word	0x000186a0
 8003284:	001e847f 	.word	0x001e847f
 8003288:	003d08ff 	.word	0x003d08ff
 800328c:	431bde83 	.word	0x431bde83
 8003290:	10624dd3 	.word	0x10624dd3

08003294 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e128      	b.n	80034f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a90      	ldr	r2, [pc, #576]	; (8003500 <HAL_I2S_Init+0x26c>)
 80032be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fd fc31 	bl	8000b28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032dc:	f023 030f 	bic.w	r3, r3, #15
 80032e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2202      	movs	r2, #2
 80032e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d060      	beq.n	80033b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032fa:	2310      	movs	r3, #16
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e001      	b.n	8003304 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003300:	2320      	movs	r3, #32
 8003302:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b20      	cmp	r3, #32
 800330a:	d802      	bhi.n	8003312 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003312:	2001      	movs	r0, #1
 8003314:	f001 f9a0 	bl	8004658 <HAL_RCCEx_GetPeriphCLKFreq>
 8003318:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003322:	d125      	bne.n	8003370 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d010      	beq.n	800334e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	fbb2 f2f3 	udiv	r2, r2, r3
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	3305      	adds	r3, #5
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	e01f      	b.n	800338e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	fbb2 f2f3 	udiv	r2, r2, r3
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	461a      	mov	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	3305      	adds	r3, #5
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	e00e      	b.n	800338e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	fbb2 f2f3 	udiv	r2, r2, r3
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	461a      	mov	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	fbb2 f3f3 	udiv	r3, r2, r3
 800338a:	3305      	adds	r3, #5
 800338c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4a5c      	ldr	r2, [pc, #368]	; (8003504 <HAL_I2S_Init+0x270>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	08db      	lsrs	r3, r3, #3
 8003398:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	e003      	b.n	80033bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033b4:	2302      	movs	r3, #2
 80033b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d902      	bls.n	80033c8 <HAL_I2S_Init+0x134>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2bff      	cmp	r3, #255	; 0xff
 80033c6:	d907      	bls.n	80033d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	f043 0210 	orr.w	r2, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e08f      	b.n	80034f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	ea42 0103 	orr.w	r1, r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033f6:	f023 030f 	bic.w	r3, r3, #15
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6851      	ldr	r1, [r2, #4]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6892      	ldr	r2, [r2, #8]
 8003402:	4311      	orrs	r1, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	68d2      	ldr	r2, [r2, #12]
 8003408:	4311      	orrs	r1, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6992      	ldr	r2, [r2, #24]
 800340e:	430a      	orrs	r2, r1
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d161      	bne.n	80034e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a38      	ldr	r2, [pc, #224]	; (8003508 <HAL_I2S_Init+0x274>)
 8003428:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a37      	ldr	r2, [pc, #220]	; (800350c <HAL_I2S_Init+0x278>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <HAL_I2S_Init+0x1a4>
 8003434:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_I2S_Init+0x27c>)
 8003436:	e001      	b.n	800343c <HAL_I2S_Init+0x1a8>
 8003438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	4932      	ldr	r1, [pc, #200]	; (800350c <HAL_I2S_Init+0x278>)
 8003444:	428a      	cmp	r2, r1
 8003446:	d101      	bne.n	800344c <HAL_I2S_Init+0x1b8>
 8003448:	4a31      	ldr	r2, [pc, #196]	; (8003510 <HAL_I2S_Init+0x27c>)
 800344a:	e001      	b.n	8003450 <HAL_I2S_Init+0x1bc>
 800344c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003450:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003454:	f023 030f 	bic.w	r3, r3, #15
 8003458:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a2b      	ldr	r2, [pc, #172]	; (800350c <HAL_I2S_Init+0x278>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d101      	bne.n	8003468 <HAL_I2S_Init+0x1d4>
 8003464:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <HAL_I2S_Init+0x27c>)
 8003466:	e001      	b.n	800346c <HAL_I2S_Init+0x1d8>
 8003468:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800346c:	2202      	movs	r2, #2
 800346e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a25      	ldr	r2, [pc, #148]	; (800350c <HAL_I2S_Init+0x278>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <HAL_I2S_Init+0x1ea>
 800347a:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_I2S_Init+0x27c>)
 800347c:	e001      	b.n	8003482 <HAL_I2S_Init+0x1ee>
 800347e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348e:	d003      	beq.n	8003498 <HAL_I2S_Init+0x204>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d103      	bne.n	80034a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	e001      	b.n	80034a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034ae:	4313      	orrs	r3, r2
 80034b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034c2:	4313      	orrs	r3, r2
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	897b      	ldrh	r3, [r7, #10]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a0d      	ldr	r2, [pc, #52]	; (800350c <HAL_I2S_Init+0x278>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <HAL_I2S_Init+0x24c>
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_I2S_Init+0x27c>)
 80034de:	e001      	b.n	80034e4 <HAL_I2S_Init+0x250>
 80034e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e4:	897a      	ldrh	r2, [r7, #10]
 80034e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	0800360b 	.word	0x0800360b
 8003504:	cccccccd 	.word	0xcccccccd
 8003508:	08003721 	.word	0x08003721
 800350c:	40003800 	.word	0x40003800
 8003510:	40003400 	.word	0x40003400

08003514 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10e      	bne.n	80035a4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003594:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ffb8 	bl	8003514 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	b292      	uxth	r2, r2
 80035c0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	1c9a      	adds	r2, r3, #2
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10e      	bne.n	8003602 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff93 	bl	8003528 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b04      	cmp	r3, #4
 8003624:	d13a      	bne.n	800369c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d109      	bne.n	8003644 <I2S_IRQHandler+0x3a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d102      	bne.n	8003644 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ffb4 	bl	80035ac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d126      	bne.n	800369c <I2S_IRQHandler+0x92>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b20      	cmp	r3, #32
 800365a:	d11f      	bne.n	800369c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800366a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ff50 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d136      	bne.n	8003716 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d109      	bne.n	80036c6 <I2S_IRQHandler+0xbc>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	2b80      	cmp	r3, #128	; 0x80
 80036be:	d102      	bne.n	80036c6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ff45 	bl	8003550 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d122      	bne.n	8003716 <I2S_IRQHandler+0x10c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d11b      	bne.n	8003716 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	f043 0204 	orr.w	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff13 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003716:	bf00      	nop
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4aa2      	ldr	r2, [pc, #648]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800373a:	4ba2      	ldr	r3, [pc, #648]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800373c:	e001      	b.n	8003742 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800373e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a9b      	ldr	r2, [pc, #620]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003758:	4b9a      	ldr	r3, [pc, #616]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800375a:	e001      	b.n	8003760 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800375c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376c:	d004      	beq.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f040 8099 	bne.w	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d107      	bne.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f925 	bl	80039dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b01      	cmp	r3, #1
 800379a:	d107      	bne.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9c8 	bl	8003b3c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d13a      	bne.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d035      	beq.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a7e      	ldr	r2, [pc, #504]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037ca:	4b7e      	ldr	r3, [pc, #504]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037cc:	e001      	b.n	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4979      	ldr	r1, [pc, #484]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037da:	428b      	cmp	r3, r1
 80037dc:	d101      	bne.n	80037e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037de:	4b79      	ldr	r3, [pc, #484]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037e0:	e001      	b.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f043 0202 	orr.w	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff fe88 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b08      	cmp	r3, #8
 8003834:	f040 80be 	bne.w	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80b8 	beq.w	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003852:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a59      	ldr	r2, [pc, #356]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800385e:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003860:	e001      	b.n	8003866 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4954      	ldr	r1, [pc, #336]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800386e:	428b      	cmp	r3, r1
 8003870:	d101      	bne.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003872:	4b54      	ldr	r3, [pc, #336]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003874:	e001      	b.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800387e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003880:	2300      	movs	r3, #0
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0204 	orr.w	r2, r3, #4
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fe4a 	bl	800353c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038a8:	e084      	b.n	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d107      	bne.n	80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8be 	bl	8003a40 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d107      	bne.n	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f8fd 	bl	8003ad8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d12f      	bne.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d02a      	beq.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003900:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2e      	ldr	r2, [pc, #184]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800390c:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800390e:	e001      	b.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4929      	ldr	r1, [pc, #164]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800391c:	428b      	cmp	r3, r1
 800391e:	d101      	bne.n	8003924 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003920:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003922:	e001      	b.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003928:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800392c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f043 0202 	orr.w	r2, r3, #2
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fdfa 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b08      	cmp	r3, #8
 8003950:	d131      	bne.n	80039b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d02c      	beq.n	80039b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d101      	bne.n	800396a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003966:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003968:	e001      	b.n	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800396a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4912      	ldr	r1, [pc, #72]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003976:	428b      	cmp	r3, r1
 8003978:	d101      	bne.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800397c:	e001      	b.n	8003982 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800397e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003982:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003986:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003996:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fdc5 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039b2:	e000      	b.n	80039b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039b4:	bf00      	nop
}
 80039b6:	bf00      	nop
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40003800 	.word	0x40003800
 80039c4:	40003400 	.word	0x40003400

080039c8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	1c99      	adds	r1, r3, #2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6251      	str	r1, [r2, #36]	; 0x24
 80039ee:	881a      	ldrh	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d113      	bne.n	8003a36 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ffc9 	bl	80039c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c99      	adds	r1, r3, #2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6251      	str	r1, [r2, #36]	; 0x24
 8003a52:	8819      	ldrh	r1, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <I2SEx_TxISR_I2SExt+0x22>
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a60:	e001      	b.n	8003a66 <I2SEx_TxISR_I2SExt+0x26>
 8003a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a66:	460a      	mov	r2, r1
 8003a68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d121      	bne.n	8003ac6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <I2SEx_TxISR_I2SExt+0x50>
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a8e:	e001      	b.n	8003a94 <I2SEx_TxISR_I2SExt+0x54>
 8003a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	490d      	ldr	r1, [pc, #52]	; (8003ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d101      	bne.n	8003aa4 <I2SEx_TxISR_I2SExt+0x64>
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8003aa2:	e001      	b.n	8003aa8 <I2SEx_TxISR_I2SExt+0x68>
 8003aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d106      	bne.n	8003ac6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff ff81 	bl	80039c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40003800 	.word	0x40003800
 8003ad4:	40003400 	.word	0x40003400

08003ad8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68d8      	ldr	r0, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	1c99      	adds	r1, r3, #2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003af0:	b282      	uxth	r2, r0
 8003af2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d113      	bne.n	8003b34 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b1a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff ff4a 	bl	80039c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a20      	ldr	r2, [pc, #128]	; (8003bcc <I2SEx_RxISR_I2SExt+0x90>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <I2SEx_RxISR_I2SExt+0x16>
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b50:	e001      	b.n	8003b56 <I2SEx_RxISR_I2SExt+0x1a>
 8003b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b56:	68d8      	ldr	r0, [r3, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	1c99      	adds	r1, r3, #2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b62:	b282      	uxth	r2, r0
 8003b64:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d121      	bne.n	8003bc2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <I2SEx_RxISR_I2SExt+0x90>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d101      	bne.n	8003b8c <I2SEx_RxISR_I2SExt+0x50>
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b8a:	e001      	b.n	8003b90 <I2SEx_RxISR_I2SExt+0x54>
 8003b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	490d      	ldr	r1, [pc, #52]	; (8003bcc <I2SEx_RxISR_I2SExt+0x90>)
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	d101      	bne.n	8003ba0 <I2SEx_RxISR_I2SExt+0x64>
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b9e:	e001      	b.n	8003ba4 <I2SEx_RxISR_I2SExt+0x68>
 8003ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ba8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff03 	bl	80039c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40003800 	.word	0x40003800
 8003bd0:	40003400 	.word	0x40003400

08003bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e264      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d075      	beq.n	8003cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bf2:	4ba3      	ldr	r3, [pc, #652]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d00c      	beq.n	8003c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfe:	4ba0      	ldr	r3, [pc, #640]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d112      	bne.n	8003c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0a:	4b9d      	ldr	r3, [pc, #628]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c16:	d10b      	bne.n	8003c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	4b99      	ldr	r3, [pc, #612]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d05b      	beq.n	8003cdc <HAL_RCC_OscConfig+0x108>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d157      	bne.n	8003cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e23f      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d106      	bne.n	8003c48 <HAL_RCC_OscConfig+0x74>
 8003c3a:	4b91      	ldr	r3, [pc, #580]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a90      	ldr	r2, [pc, #576]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e01d      	b.n	8003c84 <HAL_RCC_OscConfig+0xb0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x98>
 8003c52:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a8a      	ldr	r2, [pc, #552]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a87      	ldr	r2, [pc, #540]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0xb0>
 8003c6c:	4b84      	ldr	r3, [pc, #528]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a83      	ldr	r2, [pc, #524]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a80      	ldr	r2, [pc, #512]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d013      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fd f932 	bl	8000ef4 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fd f92e 	bl	8000ef4 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e204      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	4b76      	ldr	r3, [pc, #472]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0xc0>
 8003cb2:	e014      	b.n	8003cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd f91e 	bl	8000ef4 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cbc:	f7fd f91a 	bl	8000ef4 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e1f0      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cce:	4b6c      	ldr	r3, [pc, #432]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0xe8>
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d063      	beq.n	8003db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cea:	4b65      	ldr	r3, [pc, #404]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf6:	4b62      	ldr	r3, [pc, #392]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d11c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d02:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d116      	bne.n	8003d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0e:	4b5c      	ldr	r3, [pc, #368]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_RCC_OscConfig+0x152>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d001      	beq.n	8003d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e1c4      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	4b56      	ldr	r3, [pc, #344]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4952      	ldr	r1, [pc, #328]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3a:	e03a      	b.n	8003db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d020      	beq.n	8003d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d44:	4b4f      	ldr	r3, [pc, #316]	; (8003e84 <HAL_RCC_OscConfig+0x2b0>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fd f8d3 	bl	8000ef4 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fd f8cf 	bl	8000ef4 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e1a5      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d64:	4b46      	ldr	r3, [pc, #280]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4940      	ldr	r1, [pc, #256]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]
 8003d84:	e015      	b.n	8003db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d86:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <HAL_RCC_OscConfig+0x2b0>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fd f8b2 	bl	8000ef4 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d94:	f7fd f8ae 	bl	8000ef4 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e184      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d030      	beq.n	8003e20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d016      	beq.n	8003df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc6:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <HAL_RCC_OscConfig+0x2b4>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7fd f892 	bl	8000ef4 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd4:	f7fd f88e 	bl	8000ef4 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e164      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x200>
 8003df2:	e015      	b.n	8003e20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df4:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_RCC_OscConfig+0x2b4>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfa:	f7fd f87b 	bl	8000ef4 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e02:	f7fd f877 	bl	8000ef4 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e14d      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80a0 	beq.w	8003f6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a0e      	ldr	r2, [pc, #56]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCC_OscConfig+0x2b8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d121      	bne.n	8003eae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <HAL_RCC_OscConfig+0x2b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <HAL_RCC_OscConfig+0x2b8>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7fd f83d 	bl	8000ef4 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	e011      	b.n	8003ea2 <HAL_RCC_OscConfig+0x2ce>
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	42470000 	.word	0x42470000
 8003e88:	42470e80 	.word	0x42470e80
 8003e8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e90:	f7fd f830 	bl	8000ef4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e106      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea2:	4b85      	ldr	r3, [pc, #532]	; (80040b8 <HAL_RCC_OscConfig+0x4e4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x2f0>
 8003eb6:	4b81      	ldr	r3, [pc, #516]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a80      	ldr	r2, [pc, #512]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec2:	e01c      	b.n	8003efe <HAL_RCC_OscConfig+0x32a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d10c      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x312>
 8003ecc:	4b7b      	ldr	r3, [pc, #492]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	4a7a      	ldr	r2, [pc, #488]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ed2:	f043 0304 	orr.w	r3, r3, #4
 8003ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed8:	4b78      	ldr	r3, [pc, #480]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a77      	ldr	r2, [pc, #476]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee4:	e00b      	b.n	8003efe <HAL_RCC_OscConfig+0x32a>
 8003ee6:	4b75      	ldr	r3, [pc, #468]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a74      	ldr	r2, [pc, #464]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	4b72      	ldr	r3, [pc, #456]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a71      	ldr	r2, [pc, #452]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ef8:	f023 0304 	bic.w	r3, r3, #4
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d015      	beq.n	8003f32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f06:	f7fc fff5 	bl	8000ef4 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fc fff1 	bl	8000ef4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0c5      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f24:	4b65      	ldr	r3, [pc, #404]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0ee      	beq.n	8003f0e <HAL_RCC_OscConfig+0x33a>
 8003f30:	e014      	b.n	8003f5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f32:	f7fc ffdf 	bl	8000ef4 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f7fc ffdb 	bl	8000ef4 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e0af      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f50:	4b5a      	ldr	r3, [pc, #360]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1ee      	bne.n	8003f3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d105      	bne.n	8003f6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f62:	4b56      	ldr	r3, [pc, #344]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	4a55      	ldr	r2, [pc, #340]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 809b 	beq.w	80040ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d05c      	beq.n	800403e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d141      	bne.n	8004010 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8c:	4b4c      	ldr	r3, [pc, #304]	; (80040c0 <HAL_RCC_OscConfig+0x4ec>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fc ffaf 	bl	8000ef4 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fc ffab 	bl	8000ef4 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e081      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fac:	4b43      	ldr	r3, [pc, #268]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	019b      	lsls	r3, r3, #6
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	041b      	lsls	r3, r3, #16
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	061b      	lsls	r3, r3, #24
 8003fdc:	4937      	ldr	r1, [pc, #220]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe2:	4b37      	ldr	r3, [pc, #220]	; (80040c0 <HAL_RCC_OscConfig+0x4ec>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fc ff84 	bl	8000ef4 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fc ff80 	bl	8000ef4 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e056      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	4b2e      	ldr	r3, [pc, #184]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x41c>
 800400e:	e04e      	b.n	80040ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004010:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <HAL_RCC_OscConfig+0x4ec>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fc ff6d 	bl	8000ef4 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401e:	f7fc ff69 	bl	8000ef4 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e03f      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004030:	4b22      	ldr	r3, [pc, #136]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x44a>
 800403c:	e037      	b.n	80040ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e032      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d028      	beq.n	80040aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d121      	bne.n	80040aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d11a      	bne.n	80040aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800407a:	4013      	ands	r3, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004080:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004082:	4293      	cmp	r3, r2
 8004084:	d111      	bne.n	80040aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	3b01      	subs	r3, #1
 8004094:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d107      	bne.n	80040aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40007000 	.word	0x40007000
 80040bc:	40023800 	.word	0x40023800
 80040c0:	42470060 	.word	0x42470060

080040c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0cc      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d8:	4b68      	ldr	r3, [pc, #416]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d90c      	bls.n	8004100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b65      	ldr	r3, [pc, #404]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b63      	ldr	r3, [pc, #396]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0b8      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004118:	4b59      	ldr	r3, [pc, #356]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a58      	ldr	r2, [pc, #352]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004130:	4b53      	ldr	r3, [pc, #332]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a52      	ldr	r2, [pc, #328]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800413a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413c:	4b50      	ldr	r3, [pc, #320]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	494d      	ldr	r1, [pc, #308]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d044      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b47      	ldr	r3, [pc, #284]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d119      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e07f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d003      	beq.n	8004182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	2b03      	cmp	r3, #3
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	4b3f      	ldr	r3, [pc, #252]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e06f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e067      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a2:	4b37      	ldr	r3, [pc, #220]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4934      	ldr	r1, [pc, #208]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b4:	f7fc fe9e 	bl	8000ef4 <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	f7fc fe9a 	bl	8000ef4 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e04f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 020c 	and.w	r2, r3, #12
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d1eb      	bne.n	80041bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d20c      	bcs.n	800420c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b22      	ldr	r3, [pc, #136]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e032      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4916      	ldr	r1, [pc, #88]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	490e      	ldr	r1, [pc, #56]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800424a:	f000 f821 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800424e:	4602      	mov	r2, r0
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	490a      	ldr	r1, [pc, #40]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	5ccb      	ldrb	r3, [r1, r3]
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1c8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fc fdfe 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40023c00 	.word	0x40023c00
 8004280:	40023800 	.word	0x40023800
 8004284:	08008024 	.word	0x08008024
 8004288:	20000000 	.word	0x20000000
 800428c:	20000004 	.word	0x20000004

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	2300      	movs	r3, #0
 80042a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a8:	4b67      	ldr	r3, [pc, #412]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 030c 	and.w	r3, r3, #12
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d00d      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x40>
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	f200 80bd 	bhi.w	8004434 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x34>
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x3a>
 80042c2:	e0b7      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c4:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042c6:	60bb      	str	r3, [r7, #8]
       break;
 80042c8:	e0b7      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ca:	4b61      	ldr	r3, [pc, #388]	; (8004450 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042cc:	60bb      	str	r3, [r7, #8]
      break;
 80042ce:	e0b4      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d0:	4b5d      	ldr	r3, [pc, #372]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042da:	4b5b      	ldr	r3, [pc, #364]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d04d      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e6:	4b58      	ldr	r3, [pc, #352]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	099b      	lsrs	r3, r3, #6
 80042ec:	461a      	mov	r2, r3
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	ea02 0800 	and.w	r8, r2, r0
 80042fe:	ea03 0901 	and.w	r9, r3, r1
 8004302:	4640      	mov	r0, r8
 8004304:	4649      	mov	r1, r9
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	014b      	lsls	r3, r1, #5
 8004310:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004314:	0142      	lsls	r2, r0, #5
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	ebb0 0008 	subs.w	r0, r0, r8
 800431e:	eb61 0109 	sbc.w	r1, r1, r9
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	018b      	lsls	r3, r1, #6
 800432c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004330:	0182      	lsls	r2, r0, #6
 8004332:	1a12      	subs	r2, r2, r0
 8004334:	eb63 0301 	sbc.w	r3, r3, r1
 8004338:	f04f 0000 	mov.w	r0, #0
 800433c:	f04f 0100 	mov.w	r1, #0
 8004340:	00d9      	lsls	r1, r3, #3
 8004342:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004346:	00d0      	lsls	r0, r2, #3
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	eb12 0208 	adds.w	r2, r2, r8
 8004350:	eb43 0309 	adc.w	r3, r3, r9
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	0259      	lsls	r1, r3, #9
 800435e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004362:	0250      	lsls	r0, r2, #9
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	461a      	mov	r2, r3
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	f7fb ff28 	bl	80001c8 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e04a      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004382:	4b31      	ldr	r3, [pc, #196]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	099b      	lsrs	r3, r3, #6
 8004388:	461a      	mov	r2, r3
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	ea02 0400 	and.w	r4, r2, r0
 800439a:	ea03 0501 	and.w	r5, r3, r1
 800439e:	4620      	mov	r0, r4
 80043a0:	4629      	mov	r1, r5
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	014b      	lsls	r3, r1, #5
 80043ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043b0:	0142      	lsls	r2, r0, #5
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	1b00      	subs	r0, r0, r4
 80043b8:	eb61 0105 	sbc.w	r1, r1, r5
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	018b      	lsls	r3, r1, #6
 80043c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ca:	0182      	lsls	r2, r0, #6
 80043cc:	1a12      	subs	r2, r2, r0
 80043ce:	eb63 0301 	sbc.w	r3, r3, r1
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f04f 0100 	mov.w	r1, #0
 80043da:	00d9      	lsls	r1, r3, #3
 80043dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043e0:	00d0      	lsls	r0, r2, #3
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	1912      	adds	r2, r2, r4
 80043e8:	eb45 0303 	adc.w	r3, r5, r3
 80043ec:	f04f 0000 	mov.w	r0, #0
 80043f0:	f04f 0100 	mov.w	r1, #0
 80043f4:	0299      	lsls	r1, r3, #10
 80043f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043fa:	0290      	lsls	r0, r2, #10
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	461a      	mov	r2, r3
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	f7fb fedc 	bl	80001c8 <__aeabi_uldivmod>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4613      	mov	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	3301      	adds	r3, #1
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	60bb      	str	r3, [r7, #8]
      break;
 8004432:	e002      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004436:	60bb      	str	r3, [r7, #8]
      break;
 8004438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800443a:	68bb      	ldr	r3, [r7, #8]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
 800444c:	00f42400 	.word	0x00f42400
 8004450:	007a1200 	.word	0x007a1200

08004454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HAL_RCC_GetHCLKFreq+0x14>)
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000000 	.word	0x20000000

0800446c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004470:	f7ff fff0 	bl	8004454 <HAL_RCC_GetHCLKFreq>
 8004474:	4602      	mov	r2, r0
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	0a9b      	lsrs	r3, r3, #10
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	4903      	ldr	r1, [pc, #12]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004482:	5ccb      	ldrb	r3, [r1, r3]
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004488:	4618      	mov	r0, r3
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40023800 	.word	0x40023800
 8004490:	08008034 	.word	0x08008034

08004494 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d035      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044bc:	4b62      	ldr	r3, [pc, #392]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044c2:	f7fc fd17 	bl	8000ef4 <HAL_GetTick>
 80044c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044ca:	f7fc fd13 	bl	8000ef4 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e0b0      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044dc:	4b5b      	ldr	r3, [pc, #364]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	019a      	lsls	r2, r3, #6
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	071b      	lsls	r3, r3, #28
 80044f4:	4955      	ldr	r1, [pc, #340]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044fc:	4b52      	ldr	r3, [pc, #328]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044fe:	2201      	movs	r2, #1
 8004500:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004502:	f7fc fcf7 	bl	8000ef4 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004508:	e008      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800450a:	f7fc fcf3 	bl	8000ef4 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e090      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800451c:	4b4b      	ldr	r3, [pc, #300]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8083 	beq.w	800463c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	4b44      	ldr	r3, [pc, #272]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	4a43      	ldr	r2, [pc, #268]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004544:	6413      	str	r3, [r2, #64]	; 0x40
 8004546:	4b41      	ldr	r3, [pc, #260]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004552:	4b3f      	ldr	r3, [pc, #252]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a3e      	ldr	r2, [pc, #248]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800455e:	f7fc fcc9 	bl	8000ef4 <HAL_GetTick>
 8004562:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004566:	f7fc fcc5 	bl	8000ef4 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e062      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004578:	4b35      	ldr	r3, [pc, #212]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004584:	4b31      	ldr	r3, [pc, #196]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d02f      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d028      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a2:	4b2a      	ldr	r3, [pc, #168]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ac:	4b29      	ldr	r3, [pc, #164]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b2:	4b28      	ldr	r3, [pc, #160]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045b8:	4a24      	ldr	r2, [pc, #144]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045be:	4b23      	ldr	r3, [pc, #140]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d114      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045ca:	f7fc fc93 	bl	8000ef4 <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fc fc8f 	bl	8000ef4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e02a      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	4b18      	ldr	r3, [pc, #96]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ee      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004600:	d10d      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004616:	490d      	ldr	r1, [pc, #52]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004618:	4313      	orrs	r3, r2
 800461a:	608b      	str	r3, [r1, #8]
 800461c:	e005      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	4a0a      	ldr	r2, [pc, #40]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004624:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004628:	6093      	str	r3, [r2, #8]
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004636:	4905      	ldr	r1, [pc, #20]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004638:	4313      	orrs	r3, r2
 800463a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	42470068 	.word	0x42470068
 800464c:	40023800 	.word	0x40023800
 8004650:	40007000 	.word	0x40007000
 8004654:	42470e40 	.word	0x42470e40

08004658 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d13e      	bne.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004676:	4b23      	ldr	r3, [pc, #140]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d12f      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800468c:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800468e:	617b      	str	r3, [r7, #20]
          break;
 8004690:	e02f      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004692:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800469e:	d108      	bne.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046a0:	4b18      	ldr	r3, [pc, #96]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	e007      	b.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046b2:	4b14      	ldr	r3, [pc, #80]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ba:	4a15      	ldr	r2, [pc, #84]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c8:	099b      	lsrs	r3, r3, #6
 80046ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046d6:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046dc:	0f1b      	lsrs	r3, r3, #28
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	617b      	str	r3, [r7, #20]
          break;
 80046ea:	e002      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
          break;
 80046f0:	bf00      	nop
        }
      }
      break;
 80046f2:	bf00      	nop
    }
  }
  return frequency;
 80046f4:	697b      	ldr	r3, [r7, #20]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40023800 	.word	0x40023800
 8004708:	00bb8000 	.word	0x00bb8000
 800470c:	007a1200 	.word	0x007a1200
 8004710:	00f42400 	.word	0x00f42400

08004714 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e07b      	b.n	800481e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	2b00      	cmp	r3, #0
 800472c:	d108      	bne.n	8004740 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004736:	d009      	beq.n	800474c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	61da      	str	r2, [r3, #28]
 800473e:	e005      	b.n	800474c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc fa46 	bl	8000bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004782:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d0:	ea42 0103 	orr.w	r1, r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	0c1b      	lsrs	r3, r3, #16
 80047ea:	f003 0104 	and.w	r1, r3, #4
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	f003 0210 	and.w	r2, r3, #16
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e041      	b.n	80048bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fc fa1b 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3304      	adds	r3, #4
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f000 f8bd 	bl	80049e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d001      	beq.n	80048dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e046      	b.n	800496a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a23      	ldr	r2, [pc, #140]	; (8004978 <HAL_TIM_Base_Start+0xb4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <HAL_TIM_Base_Start+0x70>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f6:	d01d      	beq.n	8004934 <HAL_TIM_Base_Start+0x70>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1f      	ldr	r2, [pc, #124]	; (800497c <HAL_TIM_Base_Start+0xb8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <HAL_TIM_Base_Start+0x70>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1e      	ldr	r2, [pc, #120]	; (8004980 <HAL_TIM_Base_Start+0xbc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_TIM_Base_Start+0x70>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <HAL_TIM_Base_Start+0xc0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_TIM_Base_Start+0x70>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <HAL_TIM_Base_Start+0xc4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_TIM_Base_Start+0x70>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a19      	ldr	r2, [pc, #100]	; (800498c <HAL_TIM_Base_Start+0xc8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_TIM_Base_Start+0x70>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a18      	ldr	r2, [pc, #96]	; (8004990 <HAL_TIM_Base_Start+0xcc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d111      	bne.n	8004958 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b06      	cmp	r3, #6
 8004944:	d010      	beq.n	8004968 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004956:	e007      	b.n	8004968 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40000400 	.word	0x40000400
 8004980:	40000800 	.word	0x40000800
 8004984:	40000c00 	.word	0x40000c00
 8004988:	40010400 	.word	0x40010400
 800498c:	40014000 	.word	0x40014000
 8004990:	40001800 	.word	0x40001800

08004994 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6a1a      	ldr	r2, [r3, #32]
 80049a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10f      	bne.n	80049cc <HAL_TIM_Base_Stop+0x38>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6a1a      	ldr	r2, [r3, #32]
 80049b2:	f240 4344 	movw	r3, #1092	; 0x444
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_Base_Stop+0x38>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a40      	ldr	r2, [pc, #256]	; (8004af8 <TIM_Base_SetConfig+0x114>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d013      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a02:	d00f      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a3d      	ldr	r2, [pc, #244]	; (8004afc <TIM_Base_SetConfig+0x118>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a3c      	ldr	r2, [pc, #240]	; (8004b00 <TIM_Base_SetConfig+0x11c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a3b      	ldr	r2, [pc, #236]	; (8004b04 <TIM_Base_SetConfig+0x120>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a3a      	ldr	r2, [pc, #232]	; (8004b08 <TIM_Base_SetConfig+0x124>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d108      	bne.n	8004a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2f      	ldr	r2, [pc, #188]	; (8004af8 <TIM_Base_SetConfig+0x114>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d02b      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a44:	d027      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2c      	ldr	r2, [pc, #176]	; (8004afc <TIM_Base_SetConfig+0x118>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d023      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <TIM_Base_SetConfig+0x11c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01f      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <TIM_Base_SetConfig+0x120>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01b      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a29      	ldr	r2, [pc, #164]	; (8004b08 <TIM_Base_SetConfig+0x124>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d017      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <TIM_Base_SetConfig+0x128>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a27      	ldr	r2, [pc, #156]	; (8004b10 <TIM_Base_SetConfig+0x12c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00f      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <TIM_Base_SetConfig+0x130>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00b      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a25      	ldr	r2, [pc, #148]	; (8004b18 <TIM_Base_SetConfig+0x134>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d007      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a24      	ldr	r2, [pc, #144]	; (8004b1c <TIM_Base_SetConfig+0x138>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a23      	ldr	r2, [pc, #140]	; (8004b20 <TIM_Base_SetConfig+0x13c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d108      	bne.n	8004aa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <TIM_Base_SetConfig+0x114>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_Base_SetConfig+0xf8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a0c      	ldr	r2, [pc, #48]	; (8004b08 <TIM_Base_SetConfig+0x124>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d103      	bne.n	8004ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	615a      	str	r2, [r3, #20]
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40010400 	.word	0x40010400
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800
 8004b18:	40001800 	.word	0x40001800
 8004b1c:	40001c00 	.word	0x40001c00
 8004b20:	40002000 	.word	0x40002000

08004b24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b24:	b084      	sub	sp, #16
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	f107 001c 	add.w	r0, r7, #28
 8004b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d122      	bne.n	8004b82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d105      	bne.n	8004b76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f94a 	bl	8004e10 <USB_CoreReset>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	73fb      	strb	r3, [r7, #15]
 8004b80:	e01a      	b.n	8004bb8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f93e 	bl	8004e10 <USB_CoreReset>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8004baa:	e005      	b.n	8004bb8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d10b      	bne.n	8004bd6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f043 0206 	orr.w	r2, r3, #6
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f043 0220 	orr.w	r2, r3, #32
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004be2:	b004      	add	sp, #16
 8004be4:	4770      	bx	lr

08004be6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f043 0201 	orr.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f023 0201 	bic.w	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d106      	bne.n	8004c56 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]
 8004c54:	e00b      	b.n	8004c6e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d106      	bne.n	8004c6a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60da      	str	r2, [r3, #12]
 8004c68:	e001      	b.n	8004c6e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e003      	b.n	8004c76 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c6e:	2032      	movs	r0, #50	; 0x32
 8004c70:	f7fc f94c 	bl	8000f0c <HAL_Delay>

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	019b      	lsls	r3, r3, #6
 8004c92:	f043 0220 	orr.w	r2, r3, #32
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <USB_FlushTxFifo+0x48>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e006      	b.n	8004cba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d0f0      	beq.n	8004c9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	00030d40 	.word	0x00030d40

08004ccc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2210      	movs	r2, #16
 8004cdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <USB_FlushRxFifo+0x40>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d0f0      	beq.n	8004cde <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	00030d40 	.word	0x00030d40

08004d10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	; 0x24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	460b      	mov	r3, r1
 8004d20:	71fb      	strb	r3, [r7, #7]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11a      	bne.n	8004d6c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d36:	88bb      	ldrh	r3, [r7, #4]
 8004d38:	3303      	adds	r3, #3
 8004d3a:	089b      	lsrs	r3, r3, #2
 8004d3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	e00f      	b.n	8004d64 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	031a      	lsls	r2, r3, #12
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d50:	461a      	mov	r2, r3
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	3301      	adds	r3, #1
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d3eb      	bcc.n	8004d44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3724      	adds	r7, #36	; 0x24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b089      	sub	sp, #36	; 0x24
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	4613      	mov	r3, r2
 8004d86:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	3303      	adds	r3, #3
 8004d94:	089b      	lsrs	r3, r3, #2
 8004d96:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e00b      	b.n	8004db6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	601a      	str	r2, [r3, #0]
    pDest++;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	3304      	adds	r3, #4
 8004dae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	3301      	adds	r3, #1
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d3ef      	bcc.n	8004d9e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004dbe:	69fb      	ldr	r3, [r7, #28]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3724      	adds	r7, #36	; 0x24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4013      	ands	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004de4:	68fb      	ldr	r3, [r7, #12]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <USB_CoreReset+0x64>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e01b      	b.n	8004e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	daf2      	bge.n	8004e1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f043 0201 	orr.w	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <USB_CoreReset+0x64>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e006      	b.n	8004e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d0f0      	beq.n	8004e46 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	00030d40 	.word	0x00030d40

08004e78 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e78:	b084      	sub	sp, #16
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	f107 001c 	add.w	r0, r7, #28
 8004e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e94:	461a      	mov	r2, r3
 8004e96:	2300      	movs	r3, #0
 8004e98:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d10a      	bne.n	8004ee6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ede:	f043 0304 	orr.w	r3, r3, #4
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	e014      	b.n	8004f10 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e009      	b.n	8004f10 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f0a:	f023 0304 	bic.w	r3, r3, #4
 8004f0e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004f10:	2110      	movs	r1, #16
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff feb4 	bl	8004c80 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff fed7 	bl	8004ccc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e015      	b.n	8004f50 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f30:	461a      	mov	r2, r3
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f44:	461a      	mov	r2, r3
 8004f46:	2300      	movs	r3, #0
 8004f48:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d3e5      	bcc.n	8004f24 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004f58:	2101      	movs	r1, #1
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f8ac 	bl	80050b8 <USB_DriveVbus>

  HAL_Delay(200U);
 8004f60:	20c8      	movs	r0, #200	; 0xc8
 8004f62:	f7fb ffd3 	bl	8000f0c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f72:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a14      	ldr	r2, [pc, #80]	; (8004fdc <USB_HostInit+0x164>)
 8004f8c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <USB_HostInit+0x168>)
 8004f92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004f96:	e009      	b.n	8004fac <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2280      	movs	r2, #128	; 0x80
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <USB_HostInit+0x16c>)
 8004fa2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a10      	ldr	r2, [pc, #64]	; (8004fe8 <USB_HostInit+0x170>)
 8004fa8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d105      	bne.n	8004fbe <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f043 0210 	orr.w	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <USB_HostInit+0x174>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fd6:	b004      	add	sp, #16
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	01000200 	.word	0x01000200
 8004fe0:	00e00300 	.word	0x00e00300
 8004fe4:	00600080 	.word	0x00600080
 8004fe8:	004000e0 	.word	0x004000e0
 8004fec:	a3200008 	.word	0xa3200008

08004ff0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d107      	bne.n	8005042 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005038:	461a      	mov	r2, r3
 800503a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800503e:	6053      	str	r3, [r2, #4]
 8005040:	e009      	b.n	8005056 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d106      	bne.n	8005056 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800504e:	461a      	mov	r2, r3
 8005050:	f241 7370 	movw	r3, #6000	; 0x1770
 8005054:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005084:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800508e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005092:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005094:	2064      	movs	r0, #100	; 0x64
 8005096:	f7fb ff39 	bl	8000f0c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80050a8:	200a      	movs	r0, #10
 80050aa:	f7fb ff2f 	bl	8000f0c <HAL_Delay>

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d109      	bne.n	80050fc <USB_DriveVbus+0x44>
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d106      	bne.n	80050fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005106:	d109      	bne.n	800511c <USB_DriveVbus+0x64>
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800511a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	0c5b      	lsrs	r3, r3, #17
 8005148:	f003 0303 	and.w	r3, r3, #3
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	b29b      	uxth	r3, r3
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	4608      	mov	r0, r1
 8005186:	4611      	mov	r1, r2
 8005188:	461a      	mov	r2, r3
 800518a:	4603      	mov	r3, r0
 800518c:	70fb      	strb	r3, [r7, #3]
 800518e:	460b      	mov	r3, r1
 8005190:	70bb      	strb	r3, [r7, #2]
 8005192:	4613      	mov	r3, r2
 8005194:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	461a      	mov	r2, r3
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295
 80051b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80051b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d87e      	bhi.n	80052b8 <USB_HC_Init+0x13c>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <USB_HC_Init+0x44>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051d1 	.word	0x080051d1
 80051c4:	0800527b 	.word	0x0800527b
 80051c8:	080051d1 	.word	0x080051d1
 80051cc:	0800523d 	.word	0x0800523d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051dc:	461a      	mov	r2, r3
 80051de:	f240 439d 	movw	r3, #1181	; 0x49d
 80051e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80051e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	da10      	bge.n	800520e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	440a      	add	r2, r1
 8005202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800520c:	e057      	b.n	80052be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d051      	beq.n	80052be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4413      	add	r3, r2
 8005222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	78fa      	ldrb	r2, [r7, #3]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	440a      	add	r2, r1
 8005230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005234:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005238:	60d3      	str	r3, [r2, #12]
      break;
 800523a:	e040      	b.n	80052be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005248:	461a      	mov	r2, r3
 800524a:	f240 639d 	movw	r3, #1693	; 0x69d
 800524e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005250:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005254:	2b00      	cmp	r3, #0
 8005256:	da34      	bge.n	80052c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4413      	add	r3, r2
 8005260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	78fa      	ldrb	r2, [r7, #3]
 8005268:	0151      	lsls	r1, r2, #5
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	440a      	add	r2, r1
 800526e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005276:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005278:	e023      	b.n	80052c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4413      	add	r3, r2
 8005282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005286:	461a      	mov	r2, r3
 8005288:	f240 2325 	movw	r3, #549	; 0x225
 800528c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800528e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005292:	2b00      	cmp	r3, #0
 8005294:	da17      	bge.n	80052c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	78fa      	ldrb	r2, [r7, #3]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80052b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80052b6:	e006      	b.n	80052c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	77fb      	strb	r3, [r7, #31]
      break;
 80052bc:	e004      	b.n	80052c8 <USB_HC_Init+0x14c>
      break;
 80052be:	bf00      	nop
 80052c0:	e002      	b.n	80052c8 <USB_HC_Init+0x14c>
      break;
 80052c2:	bf00      	nop
 80052c4:	e000      	b.n	80052c8 <USB_HC_Init+0x14c>
      break;
 80052c6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	2101      	movs	r1, #1
 80052d8:	fa01 f303 	lsl.w	r3, r1, r3
 80052dc:	6939      	ldr	r1, [r7, #16]
 80052de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052e2:	4313      	orrs	r3, r2
 80052e4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80052f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	da03      	bge.n	8005302 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80052fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	e001      	b.n	8005306 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff ff0f 	bl	800512a <USB_GetHostSpeed>
 800530c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800530e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005312:	2b02      	cmp	r3, #2
 8005314:	d106      	bne.n	8005324 <USB_HC_Init+0x1a8>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d003      	beq.n	8005324 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800531c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e001      	b.n	8005328 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005328:	787b      	ldrb	r3, [r7, #1]
 800532a:	059b      	lsls	r3, r3, #22
 800532c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005330:	78bb      	ldrb	r3, [r7, #2]
 8005332:	02db      	lsls	r3, r3, #11
 8005334:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005338:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800533a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800533e:	049b      	lsls	r3, r3, #18
 8005340:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005344:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005346:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005348:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800534c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	0159      	lsls	r1, r3, #5
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	440b      	add	r3, r1
 800535a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005364:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005366:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800536a:	2b03      	cmp	r3, #3
 800536c:	d10f      	bne.n	800538e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4413      	add	r3, r2
 8005376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	78fa      	ldrb	r2, [r7, #3]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	440a      	add	r2, r1
 8005384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005388:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800538c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800538e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08c      	sub	sp, #48	; 0x30
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	785b      	ldrb	r3, [r3, #1]
 80053ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80053b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053b4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d02d      	beq.n	800541e <USB_HC_StartXfer+0x86>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	791b      	ldrb	r3, [r3, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d129      	bne.n	800541e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d117      	bne.n	8005400 <USB_HC_StartXfer+0x68>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	79db      	ldrb	r3, [r3, #7]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <USB_HC_StartXfer+0x48>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	79db      	ldrb	r3, [r3, #7]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d10f      	bne.n	8005400 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	6a3a      	ldr	r2, [r7, #32]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10b      	bne.n	800541e <USB_HC_StartXfer+0x86>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	795b      	ldrb	r3, [r3, #5]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d107      	bne.n	800541e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	785b      	ldrb	r3, [r3, #1]
 8005412:	4619      	mov	r1, r3
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 fa2f 	bl	8005878 <USB_DoPing>
      return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e0f8      	b.n	8005610 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d018      	beq.n	8005458 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	8912      	ldrh	r2, [r2, #8]
 800542e:	4413      	add	r3, r2
 8005430:	3b01      	subs	r3, #1
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	8912      	ldrh	r2, [r2, #8]
 8005436:	fbb3 f3f2 	udiv	r3, r3, r2
 800543a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800543c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800543e:	8b7b      	ldrh	r3, [r7, #26]
 8005440:	429a      	cmp	r2, r3
 8005442:	d90b      	bls.n	800545c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005444:	8b7b      	ldrh	r3, [r7, #26]
 8005446:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005448:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	8912      	ldrh	r2, [r2, #8]
 800544e:	fb02 f203 	mul.w	r2, r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	611a      	str	r2, [r3, #16]
 8005456:	e001      	b.n	800545c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005458:	2301      	movs	r3, #1
 800545a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	78db      	ldrb	r3, [r3, #3]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005464:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	8912      	ldrh	r2, [r2, #8]
 800546a:	fb02 f203 	mul.w	r2, r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	611a      	str	r2, [r3, #16]
 8005472:	e003      	b.n	800547c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005484:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005486:	04d9      	lsls	r1, r3, #19
 8005488:	4b63      	ldr	r3, [pc, #396]	; (8005618 <USB_HC_StartXfer+0x280>)
 800548a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800548c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	7a9b      	ldrb	r3, [r3, #10]
 8005492:	075b      	lsls	r3, r3, #29
 8005494:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005498:	69f9      	ldr	r1, [r7, #28]
 800549a:	0148      	lsls	r0, r1, #5
 800549c:	6a39      	ldr	r1, [r7, #32]
 800549e:	4401      	add	r1, r0
 80054a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80054a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	68d9      	ldr	r1, [r3, #12]
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054be:	460a      	mov	r2, r1
 80054c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bf0c      	ite	eq
 80054d2:	2301      	moveq	r3, #1
 80054d4:	2300      	movne	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	6a3a      	ldr	r2, [r7, #32]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	4413      	add	r3, r2
 8005502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	7e7b      	ldrb	r3, [r7, #25]
 800550a:	075b      	lsls	r3, r3, #29
 800550c:	69f9      	ldr	r1, [r7, #28]
 800550e:	0148      	lsls	r0, r1, #5
 8005510:	6a39      	ldr	r1, [r7, #32]
 8005512:	4401      	add	r1, r0
 8005514:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005518:	4313      	orrs	r3, r2
 800551a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	4413      	add	r3, r2
 8005524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005532:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	78db      	ldrb	r3, [r3, #3]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	e003      	b.n	800554e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800554c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005554:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	4413      	add	r3, r2
 800555e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005562:	461a      	mov	r2, r3
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e04e      	b.n	8005610 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	78db      	ldrb	r3, [r3, #3]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d149      	bne.n	800560e <USB_HC_StartXfer+0x276>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d045      	beq.n	800560e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	79db      	ldrb	r3, [r3, #7]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d830      	bhi.n	80055ec <USB_HC_StartXfer+0x254>
 800558a:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <USB_HC_StartXfer+0x1f8>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055c5 	.word	0x080055c5
 8005598:	080055a1 	.word	0x080055a1
 800559c:	080055c5 	.word	0x080055c5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	3303      	adds	r3, #3
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80055aa:	8afa      	ldrh	r2, [r7, #22]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d91c      	bls.n	80055f0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80055c2:	e015      	b.n	80055f0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	3303      	adds	r3, #3
 80055ca:	089b      	lsrs	r3, r3, #2
 80055cc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80055ce:	8afa      	ldrh	r2, [r7, #22]
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	429a      	cmp	r2, r3
 80055dc:	d90a      	bls.n	80055f4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80055ea:	e003      	b.n	80055f4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80055ec:	bf00      	nop
 80055ee:	e002      	b.n	80055f6 <USB_HC_StartXfer+0x25e>
        break;
 80055f0:	bf00      	nop
 80055f2:	e000      	b.n	80055f6 <USB_HC_StartXfer+0x25e>
        break;
 80055f4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	68d9      	ldr	r1, [r3, #12]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	785a      	ldrb	r2, [r3, #1]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	b29b      	uxth	r3, r3
 8005604:	2000      	movs	r0, #0
 8005606:	9000      	str	r0, [sp, #0]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7ff fb81 	bl	8004d10 <USB_WritePacket>
  }

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3728      	adds	r7, #40	; 0x28
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	1ff80000 	.word	0x1ff80000

0800561c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	b29b      	uxth	r3, r3
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800563e:	b480      	push	{r7}
 8005640:	b089      	sub	sp, #36	; 0x24
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800564e:	78fb      	ldrb	r3, [r7, #3]
 8005650:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	0c9b      	lsrs	r3, r3, #18
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	4413      	add	r3, r2
 8005674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	0fdb      	lsrs	r3, r3, #31
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b20      	cmp	r3, #32
 800568c:	d104      	bne.n	8005698 <USB_HC_Halt+0x5a>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e0e8      	b.n	800586a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <USB_HC_Halt+0x66>
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d173      	bne.n	800578c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056c2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f040 80cb 	bne.w	8005868 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d143      	bne.n	8005766 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	4413      	add	r3, r2
 8005706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	440a      	add	r2, r1
 8005714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800571c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	4413      	add	r3, r2
 8005726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	440a      	add	r2, r1
 8005734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005738:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800573c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3301      	adds	r3, #1
 8005742:	61fb      	str	r3, [r7, #28]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800574a:	d81d      	bhi.n	8005788 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	4413      	add	r3, r2
 8005754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800575e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005762:	d0ec      	beq.n	800573e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005764:	e080      	b.n	8005868 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	4413      	add	r3, r2
 800576e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	440a      	add	r2, r1
 800577c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005784:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005786:	e06f      	b.n	8005868 <USB_HC_Halt+0x22a>
            break;
 8005788:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800578a:	e06d      	b.n	8005868 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d143      	bne.n	8005844 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	4413      	add	r3, r2
 8005804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	440a      	add	r2, r1
 8005812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005816:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800581a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	3301      	adds	r3, #1
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005828:	d81d      	bhi.n	8005866 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	4413      	add	r3, r2
 8005832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005840:	d0ec      	beq.n	800581c <USB_HC_Halt+0x1de>
 8005842:	e011      	b.n	8005868 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	440a      	add	r2, r1
 800585a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800585e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	e000      	b.n	8005868 <USB_HC_Halt+0x22a>
          break;
 8005866:	bf00      	nop
    }
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3724      	adds	r7, #36	; 0x24
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
	...

08005878 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800588c:	2301      	movs	r3, #1
 800588e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	04da      	lsls	r2, r3, #19
 8005894:	4b15      	ldr	r3, [pc, #84]	; (80058ec <USB_DoPing+0x74>)
 8005896:	4013      	ands	r3, r2
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058a8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058c0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058c8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d6:	461a      	mov	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	1ff80000 	.word	0x1ff80000

080058f0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff f981 	bl	8004c08 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005906:	2110      	movs	r1, #16
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff f9b9 	bl	8004c80 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff f9dc 	bl	8004ccc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	e01f      	b.n	800595a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005930:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005938:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005940:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4413      	add	r3, r2
 800594a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594e:	461a      	mov	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	3301      	adds	r3, #1
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b0f      	cmp	r3, #15
 800595e:	d9dc      	bls.n	800591a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	e034      	b.n	80059d0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800597c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005984:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800598c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	461a      	mov	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	3301      	adds	r3, #1
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ac:	d80c      	bhi.n	80059c8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c4:	d0ec      	beq.n	80059a0 <USB_StopHost+0xb0>
 80059c6:	e000      	b.n	80059ca <USB_StopHost+0xda>
        break;
 80059c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	3301      	adds	r3, #1
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b0f      	cmp	r3, #15
 80059d4:	d9c7      	bls.n	8005966 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059dc:	461a      	mov	r2, r3
 80059de:	f04f 33ff 	mov.w	r3, #4294967295
 80059e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f04f 32ff 	mov.w	r2, #4294967295
 80059ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff f8fa 	bl	8004be6 <USB_EnableGlobalInt>

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b089      	sub	sp, #36	; 0x24
 8005a00:	af04      	add	r7, sp, #16
 8005a02:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005a04:	2301      	movs	r3, #1
 8005a06:	2202      	movs	r2, #2
 8005a08:	2102      	movs	r1, #2
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fc66 	bl	80062dc <USBH_FindInterface>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2bff      	cmp	r3, #255	; 0xff
 8005a18:	d002      	beq.n	8005a20 <USBH_CDC_InterfaceInit+0x24>
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d901      	bls.n	8005a24 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005a20:	2302      	movs	r3, #2
 8005a22:	e13d      	b.n	8005ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fc3b 	bl	80062a4 <USBH_SelectInterface>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005a32:	7bbb      	ldrb	r3, [r7, #14]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e131      	b.n	8005ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005a42:	2050      	movs	r0, #80	; 0x50
 8005a44:	f002 fa00 	bl	8007e48 <malloc>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e11f      	b.n	8005ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005a60:	2250      	movs	r2, #80	; 0x50
 8005a62:	2100      	movs	r1, #0
 8005a64:	68b8      	ldr	r0, [r7, #8]
 8005a66:	f002 f9ff 	bl	8007e68 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	211a      	movs	r1, #26
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	4413      	add	r3, r2
 8005a76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	b25b      	sxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da15      	bge.n	8005aae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	211a      	movs	r1, #26
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a92:	781a      	ldrb	r2, [r3, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	211a      	movs	r1, #26
 8005a9e:	fb01 f303 	mul.w	r3, r1, r3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005aa8:	881a      	ldrh	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f001 fe32 	bl	800771e <USBH_AllocPipe>
 8005aba:	4603      	mov	r3, r0
 8005abc:	461a      	mov	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	7819      	ldrb	r1, [r3, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	7858      	ldrb	r0, [r3, #1]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	8952      	ldrh	r2, [r2, #10]
 8005ada:	9202      	str	r2, [sp, #8]
 8005adc:	2203      	movs	r2, #3
 8005ade:	9201      	str	r2, [sp, #4]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	4623      	mov	r3, r4
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 fdea 	bl	80076c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2200      	movs	r2, #0
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f002 f8f9 	bl	8007cec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005afa:	2300      	movs	r3, #0
 8005afc:	2200      	movs	r2, #0
 8005afe:	210a      	movs	r1, #10
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fbeb 	bl	80062dc <USBH_FindInterface>
 8005b06:	4603      	mov	r3, r0
 8005b08:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	2bff      	cmp	r3, #255	; 0xff
 8005b0e:	d002      	beq.n	8005b16 <USBH_CDC_InterfaceInit+0x11a>
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d901      	bls.n	8005b1a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005b16:	2302      	movs	r3, #2
 8005b18:	e0c2      	b.n	8005ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	211a      	movs	r1, #26
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	b25b      	sxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	da16      	bge.n	8005b60 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	211a      	movs	r1, #26
 8005b38:	fb01 f303 	mul.w	r3, r1, r3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	211a      	movs	r1, #26
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b58:	881a      	ldrh	r2, [r3, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	835a      	strh	r2, [r3, #26]
 8005b5e:	e015      	b.n	8005b8c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	211a      	movs	r1, #26
 8005b66:	fb01 f303 	mul.w	r3, r1, r3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b70:	781a      	ldrb	r2, [r3, #0]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	211a      	movs	r1, #26
 8005b7c:	fb01 f303 	mul.w	r3, r1, r3
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b86:	881a      	ldrh	r2, [r3, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	211a      	movs	r1, #26
 8005b92:	fb01 f303 	mul.w	r3, r1, r3
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b25b      	sxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	da16      	bge.n	8005bd2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	211a      	movs	r1, #26
 8005baa:	fb01 f303 	mul.w	r3, r1, r3
 8005bae:	4413      	add	r3, r2
 8005bb0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	211a      	movs	r1, #26
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005bca:	881a      	ldrh	r2, [r3, #0]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	835a      	strh	r2, [r3, #26]
 8005bd0:	e015      	b.n	8005bfe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	211a      	movs	r1, #26
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	4413      	add	r3, r2
 8005bde:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005be2:	781a      	ldrb	r2, [r3, #0]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	211a      	movs	r1, #26
 8005bee:	fb01 f303 	mul.w	r3, r1, r3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005bf8:	881a      	ldrh	r2, [r3, #0]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	7b9b      	ldrb	r3, [r3, #14]
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 fd8a 	bl	800771e <USBH_AllocPipe>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	7bdb      	ldrb	r3, [r3, #15]
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 fd80 	bl	800771e <USBH_AllocPipe>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	7b59      	ldrb	r1, [r3, #13]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	7b98      	ldrb	r0, [r3, #14]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	8b12      	ldrh	r2, [r2, #24]
 8005c3e:	9202      	str	r2, [sp, #8]
 8005c40:	2202      	movs	r2, #2
 8005c42:	9201      	str	r2, [sp, #4]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	4623      	mov	r3, r4
 8005c48:	4602      	mov	r2, r0
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f001 fd38 	bl	80076c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	7b19      	ldrb	r1, [r3, #12]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	7bd8      	ldrb	r0, [r3, #15]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	8b52      	ldrh	r2, [r2, #26]
 8005c68:	9202      	str	r2, [sp, #8]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	9201      	str	r2, [sp, #4]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	4623      	mov	r3, r4
 8005c72:	4602      	mov	r2, r0
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 fd23 	bl	80076c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	7b5b      	ldrb	r3, [r3, #13]
 8005c86:	2200      	movs	r2, #0
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f002 f82e 	bl	8007cec <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	7b1b      	ldrb	r3, [r3, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f002 f827 	bl	8007cec <USBH_LL_SetToggle>

  return USBH_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd90      	pop	{r4, r7, pc}

08005ca8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00e      	beq.n	8005ce0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 fd18 	bl	80076fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 fd43 	bl	8007760 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	7b1b      	ldrb	r3, [r3, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00e      	beq.n	8005d06 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	7b1b      	ldrb	r3, [r3, #12]
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f001 fd05 	bl	80076fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	7b1b      	ldrb	r3, [r3, #12]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f001 fd30 	bl	8007760 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	7b5b      	ldrb	r3, [r3, #13]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00e      	beq.n	8005d2c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	7b5b      	ldrb	r3, [r3, #13]
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f001 fcf2 	bl	80076fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	7b5b      	ldrb	r3, [r3, #13]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 fd1d 	bl	8007760 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f002 f889 	bl	8007e58 <free>
    phost->pActiveClass->pData = 0U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3340      	adds	r3, #64	; 0x40
 8005d70:	4619      	mov	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f8b1 	bl	8005eda <GetLineCoding>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005d7c:	7afb      	ldrb	r3, [r7, #11]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d105      	bne.n	8005d8e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d88:	2102      	movs	r1, #2
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005da0:	2301      	movs	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d877      	bhi.n	8005eac <USBH_CDC_Process+0x114>
 8005dbc:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <USBH_CDC_Process+0x2c>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005dd9 	.word	0x08005dd9
 8005dc8:	08005ddf 	.word	0x08005ddf
 8005dcc:	08005e0f 	.word	0x08005e0f
 8005dd0:	08005e83 	.word	0x08005e83
 8005dd4:	08005e91 	.word	0x08005e91
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]
      break;
 8005ddc:	e06d      	b.n	8005eba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f897 	bl	8005f18 <SetLineCoding>
 8005dea:	4603      	mov	r3, r0
 8005dec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005dee:	7bbb      	ldrb	r3, [r7, #14]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005dfc:	e058      	b.n	8005eb0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005dfe:	7bbb      	ldrb	r3, [r7, #14]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d055      	beq.n	8005eb0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2204      	movs	r2, #4
 8005e08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005e0c:	e050      	b.n	8005eb0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	3340      	adds	r3, #64	; 0x40
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f860 	bl	8005eda <GetLineCoding>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d126      	bne.n	8005e72 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e36:	791b      	ldrb	r3, [r3, #4]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d13b      	bne.n	8005eb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e46:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d133      	bne.n	8005eb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e56:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d12b      	bne.n	8005eb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e64:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d124      	bne.n	8005eb4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f958 	bl	8006120 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005e70:	e020      	b.n	8005eb4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005e72:	7bbb      	ldrb	r3, [r7, #14]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d01d      	beq.n	8005eb4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005e80:	e018      	b.n	8005eb4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f867 	bl	8005f56 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f8da 	bl	8006042 <CDC_ProcessReception>
      break;
 8005e8e:	e014      	b.n	8005eba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005e90:	2100      	movs	r1, #0
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 ffe3 	bl	8006e5e <USBH_ClrFeature>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005eaa:	e005      	b.n	8005eb8 <USBH_CDC_Process+0x120>

    default:
      break;
 8005eac:	bf00      	nop
 8005eae:	e004      	b.n	8005eba <USBH_CDC_Process+0x122>
      break;
 8005eb0:	bf00      	nop
 8005eb2:	e002      	b.n	8005eba <USBH_CDC_Process+0x122>
      break;
 8005eb4:	bf00      	nop
 8005eb6:	e000      	b.n	8005eba <USBH_CDC_Process+0x122>
      break;
 8005eb8:	bf00      	nop

  }

  return status;
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	22a1      	movs	r2, #161	; 0xa1
 8005ee8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2221      	movs	r2, #33	; 0x21
 8005eee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2207      	movs	r2, #7
 8005f00:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2207      	movs	r2, #7
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 f988 	bl	800721e <USBH_CtlReq>
 8005f0e:	4603      	mov	r3, r0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2221      	movs	r2, #33	; 0x21
 8005f26:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2207      	movs	r2, #7
 8005f3e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2207      	movs	r2, #7
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f001 f969 	bl	800721e <USBH_CtlReq>
 8005f4c:	4603      	mov	r3, r0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b086      	sub	sp, #24
 8005f5a:	af02      	add	r7, sp, #8
 8005f5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d002      	beq.n	8005f7c <CDC_ProcessTransmission+0x26>
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d023      	beq.n	8005fc2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005f7a:	e05e      	b.n	800603a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	8b12      	ldrh	r2, [r2, #24]
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d90b      	bls.n	8005fa0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	69d9      	ldr	r1, [r3, #28]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8b1a      	ldrh	r2, [r3, #24]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	7b5b      	ldrb	r3, [r3, #13]
 8005f94:	2001      	movs	r0, #1
 8005f96:	9000      	str	r0, [sp, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f001 fb4e 	bl	800763a <USBH_BulkSendData>
 8005f9e:	e00b      	b.n	8005fb8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	7b5b      	ldrb	r3, [r3, #13]
 8005fae:	2001      	movs	r0, #1
 8005fb0:	9000      	str	r0, [sp, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 fb41 	bl	800763a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005fc0:	e03b      	b.n	800603a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	7b5b      	ldrb	r3, [r3, #13]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 fe65 	bl	8007c98 <USBH_LL_GetURBState>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d128      	bne.n	800602a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	8b12      	ldrh	r2, [r2, #24]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d90e      	bls.n	8006002 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	8b12      	ldrh	r2, [r2, #24]
 8005fec:	1a9a      	subs	r2, r3, r2
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	8b12      	ldrh	r2, [r2, #24]
 8005ffa:	441a      	add	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	61da      	str	r2, [r3, #28]
 8006000:	e002      	b.n	8006008 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006018:	e00e      	b.n	8006038 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f868 	bl	80060f8 <USBH_CDC_TransmitCallback>
      break;
 8006028:	e006      	b.n	8006038 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d103      	bne.n	8006038 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006038:	bf00      	nop
  }
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006054:	2300      	movs	r3, #0
 8006056:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800605e:	2b03      	cmp	r3, #3
 8006060:	d002      	beq.n	8006068 <CDC_ProcessReception+0x26>
 8006062:	2b04      	cmp	r3, #4
 8006064:	d00e      	beq.n	8006084 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006066:	e043      	b.n	80060f0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	6a19      	ldr	r1, [r3, #32]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	8b5a      	ldrh	r2, [r3, #26]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	7b1b      	ldrb	r3, [r3, #12]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 fb05 	bl	8007684 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2204      	movs	r2, #4
 800607e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006082:	e035      	b.n	80060f0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	7b1b      	ldrb	r3, [r3, #12]
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f001 fe04 	bl	8007c98 <USBH_LL_GetURBState>
 8006090:	4603      	mov	r3, r0
 8006092:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006094:	7cfb      	ldrb	r3, [r7, #19]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d129      	bne.n	80060ee <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	7b1b      	ldrb	r3, [r3, #12]
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 fd67 	bl	8007b74 <USBH_LL_GetLastXferSize>
 80060a6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d016      	beq.n	80060e0 <CDC_ProcessReception+0x9e>
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	8b5b      	ldrh	r3, [r3, #26]
 80060b6:	461a      	mov	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d910      	bls.n	80060e0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad2      	subs	r2, r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	6a1a      	ldr	r2, [r3, #32]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	441a      	add	r2, r3
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2203      	movs	r2, #3
 80060da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80060de:	e006      	b.n	80060ee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f80f 	bl	800610c <USBH_CDC_ReceiveCallback>
      break;
 80060ee:	bf00      	nop
  }
}
 80060f0:	bf00      	nop
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	4613      	mov	r3, r2
 8006140:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006148:	2302      	movs	r3, #2
 800614a:	e029      	b.n	80061a0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	79fa      	ldrb	r2, [r7, #7]
 8006150:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f81f 	bl	80061a8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f001 fc37 	bl	8007a0c <USBH_LL_Init>

  return USBH_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	e009      	b.n	80061ce <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	33e0      	adds	r3, #224	; 0xe0
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	2200      	movs	r2, #0
 80061c6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3301      	adds	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b0e      	cmp	r3, #14
 80061d2:	d9f2      	bls.n	80061ba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e009      	b.n	80061ee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3301      	adds	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f4:	d3f1      	bcc.n	80061da <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2240      	movs	r2, #64	; 0x40
 800621a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d016      	beq.n	8006292 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10e      	bne.n	800628c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006274:	1c59      	adds	r1, r3, #1
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	33de      	adds	r3, #222	; 0xde
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
 800628a:	e004      	b.n	8006296 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800628c:	2302      	movs	r3, #2
 800628e:	73fb      	strb	r3, [r7, #15]
 8006290:	e001      	b.n	8006296 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006292:	2302      	movs	r3, #2
 8006294:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006296:	7bfb      	ldrb	r3, [r7, #15]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80062ba:	78fa      	ldrb	r2, [r7, #3]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d204      	bcs.n	80062ca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	78fa      	ldrb	r2, [r7, #3]
 80062c4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80062c8:	e001      	b.n	80062ce <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80062ca:	2302      	movs	r3, #2
 80062cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	4608      	mov	r0, r1
 80062e6:	4611      	mov	r1, r2
 80062e8:	461a      	mov	r2, r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	70fb      	strb	r3, [r7, #3]
 80062ee:	460b      	mov	r3, r1
 80062f0:	70bb      	strb	r3, [r7, #2]
 80062f2:	4613      	mov	r3, r2
 80062f4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006304:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006306:	e025      	b.n	8006354 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	221a      	movs	r2, #26
 800630c:	fb02 f303 	mul.w	r3, r2, r3
 8006310:	3308      	adds	r3, #8
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	3302      	adds	r3, #2
 8006318:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	795b      	ldrb	r3, [r3, #5]
 800631e:	78fa      	ldrb	r2, [r7, #3]
 8006320:	429a      	cmp	r2, r3
 8006322:	d002      	beq.n	800632a <USBH_FindInterface+0x4e>
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	2bff      	cmp	r3, #255	; 0xff
 8006328:	d111      	bne.n	800634e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800632e:	78ba      	ldrb	r2, [r7, #2]
 8006330:	429a      	cmp	r2, r3
 8006332:	d002      	beq.n	800633a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006334:	78bb      	ldrb	r3, [r7, #2]
 8006336:	2bff      	cmp	r3, #255	; 0xff
 8006338:	d109      	bne.n	800634e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800633e:	787a      	ldrb	r2, [r7, #1]
 8006340:	429a      	cmp	r2, r3
 8006342:	d002      	beq.n	800634a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006344:	787b      	ldrb	r3, [r7, #1]
 8006346:	2bff      	cmp	r3, #255	; 0xff
 8006348:	d101      	bne.n	800634e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	e006      	b.n	800635c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	3301      	adds	r3, #1
 8006352:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d9d6      	bls.n	8006308 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800635a:	23ff      	movs	r3, #255	; 0xff
}
 800635c:	4618      	mov	r0, r3
 800635e:	371c      	adds	r7, #28
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 fb87 	bl	8007a84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006376:	2101      	movs	r1, #1
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 fca0 	bl	8007cbe <USBH_LL_DriverVBUS>

  return USBH_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af04      	add	r7, sp, #16
 800638e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006390:	2302      	movs	r3, #2
 8006392:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d102      	bne.n	80063aa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2203      	movs	r2, #3
 80063a8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b0b      	cmp	r3, #11
 80063b2:	f200 81b3 	bhi.w	800671c <USBH_Process+0x394>
 80063b6:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <USBH_Process+0x34>)
 80063b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063bc:	080063ed 	.word	0x080063ed
 80063c0:	0800641f 	.word	0x0800641f
 80063c4:	08006487 	.word	0x08006487
 80063c8:	080066b7 	.word	0x080066b7
 80063cc:	0800671d 	.word	0x0800671d
 80063d0:	0800652b 	.word	0x0800652b
 80063d4:	0800665d 	.word	0x0800665d
 80063d8:	08006561 	.word	0x08006561
 80063dc:	08006581 	.word	0x08006581
 80063e0:	080065a1 	.word	0x080065a1
 80063e4:	080065cf 	.word	0x080065cf
 80063e8:	0800669f 	.word	0x0800669f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8193 	beq.w	8006720 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006400:	20c8      	movs	r0, #200	; 0xc8
 8006402:	f001 fca3 	bl	8007d4c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f001 fb99 	bl	8007b3e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800641c:	e180      	b.n	8006720 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006424:	2b01      	cmp	r3, #1
 8006426:	d107      	bne.n	8006438 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006436:	e182      	b.n	800673e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800643e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006442:	d914      	bls.n	800646e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800644a:	3301      	adds	r3, #1
 800644c:	b2da      	uxtb	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800645a:	2b03      	cmp	r3, #3
 800645c:	d903      	bls.n	8006466 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	220d      	movs	r2, #13
 8006462:	701a      	strb	r2, [r3, #0]
      break;
 8006464:	e16b      	b.n	800673e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
      break;
 800646c:	e167      	b.n	800673e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006474:	f103 020a 	add.w	r2, r3, #10
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800647e:	200a      	movs	r0, #10
 8006480:	f001 fc64 	bl	8007d4c <USBH_Delay>
      break;
 8006484:	e15b      	b.n	800673e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006496:	2104      	movs	r1, #4
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800649c:	2064      	movs	r0, #100	; 0x64
 800649e:	f001 fc55 	bl	8007d4c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 fb24 	bl	8007af0 <USBH_LL_GetSpeed>
 80064a8:	4603      	mov	r3, r0
 80064aa:	461a      	mov	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2205      	movs	r2, #5
 80064b6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80064b8:	2100      	movs	r1, #0
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 f92f 	bl	800771e <USBH_AllocPipe>
 80064c0:	4603      	mov	r3, r0
 80064c2:	461a      	mov	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80064c8:	2180      	movs	r1, #128	; 0x80
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 f927 	bl	800771e <USBH_AllocPipe>
 80064d0:	4603      	mov	r3, r0
 80064d2:	461a      	mov	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	7919      	ldrb	r1, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80064ec:	b292      	uxth	r2, r2
 80064ee:	9202      	str	r2, [sp, #8]
 80064f0:	2200      	movs	r2, #0
 80064f2:	9201      	str	r2, [sp, #4]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	4603      	mov	r3, r0
 80064f8:	2280      	movs	r2, #128	; 0x80
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 f8e0 	bl	80076c0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	7959      	ldrb	r1, [r3, #5]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006514:	b292      	uxth	r2, r2
 8006516:	9202      	str	r2, [sp, #8]
 8006518:	2200      	movs	r2, #0
 800651a:	9201      	str	r2, [sp, #4]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	4603      	mov	r3, r0
 8006520:	2200      	movs	r2, #0
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 f8cc 	bl	80076c0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006528:	e109      	b.n	800673e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f90c 	bl	8006748 <USBH_HandleEnum>
 8006530:	4603      	mov	r3, r0
 8006532:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	f040 80f3 	bne.w	8006724 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800654c:	2b01      	cmp	r3, #1
 800654e:	d103      	bne.n	8006558 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2208      	movs	r2, #8
 8006554:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006556:	e0e5      	b.n	8006724 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2207      	movs	r2, #7
 800655c:	701a      	strb	r2, [r3, #0]
      break;
 800655e:	e0e1      	b.n	8006724 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80de 	beq.w	8006728 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006572:	2101      	movs	r1, #1
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2208      	movs	r2, #8
 800657c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800657e:	e0d3      	b.n	8006728 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006586:	b29b      	uxth	r3, r3
 8006588:	4619      	mov	r1, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fc20 	bl	8006dd0 <USBH_SetCfg>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 80ca 	bne.w	800672c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2209      	movs	r2, #9
 800659c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800659e:	e0c5      	b.n	800672c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80065ae:	2101      	movs	r1, #1
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fc30 	bl	8006e16 <USBH_SetFeature>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f040 80b9 	bne.w	8006730 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	220a      	movs	r2, #10
 80065c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80065c4:	e0b4      	b.n	8006730 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	220a      	movs	r2, #10
 80065ca:	701a      	strb	r2, [r3, #0]
      break;
 80065cc:	e0b0      	b.n	8006730 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 80ad 	beq.w	8006734 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
 80065e6:	e016      	b.n	8006616 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80065e8:	7bfa      	ldrb	r2, [r7, #15]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	32de      	adds	r2, #222	; 0xde
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	791a      	ldrb	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d108      	bne.n	8006610 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80065fe:	7bfa      	ldrb	r2, [r7, #15]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	32de      	adds	r2, #222	; 0xde
 8006604:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800660e:	e005      	b.n	800661c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	3301      	adds	r3, #1
 8006614:	73fb      	strb	r3, [r7, #15]
 8006616:	7bfb      	ldrb	r3, [r7, #15]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0e5      	beq.n	80065e8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2206      	movs	r2, #6
 800663c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006644:	2103      	movs	r1, #3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800664a:	e073      	b.n	8006734 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	220d      	movs	r2, #13
 8006650:	701a      	strb	r2, [r3, #0]
      break;
 8006652:	e06f      	b.n	8006734 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	220d      	movs	r2, #13
 8006658:	701a      	strb	r2, [r3, #0]
      break;
 800665a:	e06b      	b.n	8006734 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006662:	2b00      	cmp	r3, #0
 8006664:	d017      	beq.n	8006696 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
 8006672:	4603      	mov	r3, r0
 8006674:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d103      	bne.n	8006686 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	220b      	movs	r2, #11
 8006682:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006684:	e058      	b.n	8006738 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006686:	7bbb      	ldrb	r3, [r7, #14]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d154      	bne.n	8006738 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	220d      	movs	r2, #13
 8006692:	701a      	strb	r2, [r3, #0]
      break;
 8006694:	e050      	b.n	8006738 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	220d      	movs	r2, #13
 800669a:	701a      	strb	r2, [r3, #0]
      break;
 800669c:	e04c      	b.n	8006738 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d049      	beq.n	800673c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
      }
      break;
 80066b4:	e042      	b.n	800673c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff fd72 	bl	80061a8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066f2:	2105      	movs	r1, #5
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b01      	cmp	r3, #1
 8006702:	d107      	bne.n	8006714 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff fe2b 	bl	8006368 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006712:	e014      	b.n	800673e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f9b5 	bl	8007a84 <USBH_LL_Start>
      break;
 800671a:	e010      	b.n	800673e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800671c:	bf00      	nop
 800671e:	e00e      	b.n	800673e <USBH_Process+0x3b6>
      break;
 8006720:	bf00      	nop
 8006722:	e00c      	b.n	800673e <USBH_Process+0x3b6>
      break;
 8006724:	bf00      	nop
 8006726:	e00a      	b.n	800673e <USBH_Process+0x3b6>
    break;
 8006728:	bf00      	nop
 800672a:	e008      	b.n	800673e <USBH_Process+0x3b6>
      break;
 800672c:	bf00      	nop
 800672e:	e006      	b.n	800673e <USBH_Process+0x3b6>
      break;
 8006730:	bf00      	nop
 8006732:	e004      	b.n	800673e <USBH_Process+0x3b6>
      break;
 8006734:	bf00      	nop
 8006736:	e002      	b.n	800673e <USBH_Process+0x3b6>
      break;
 8006738:	bf00      	nop
 800673a:	e000      	b.n	800673e <USBH_Process+0x3b6>
      break;
 800673c:	bf00      	nop
  }
  return USBH_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af04      	add	r7, sp, #16
 800674e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006750:	2301      	movs	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006754:	2301      	movs	r3, #1
 8006756:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b07      	cmp	r3, #7
 800675e:	f200 81c1 	bhi.w	8006ae4 <USBH_HandleEnum+0x39c>
 8006762:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <USBH_HandleEnum+0x20>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	08006789 	.word	0x08006789
 800676c:	08006847 	.word	0x08006847
 8006770:	080068b1 	.word	0x080068b1
 8006774:	0800693f 	.word	0x0800693f
 8006778:	080069a9 	.word	0x080069a9
 800677c:	08006a19 	.word	0x08006a19
 8006780:	08006a5f 	.word	0x08006a5f
 8006784:	08006aa5 	.word	0x08006aa5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006788:	2108      	movs	r1, #8
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa50 	bl	8006c30 <USBH_Get_DevDesc>
 8006790:	4603      	mov	r3, r0
 8006792:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d130      	bne.n	80067fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	7919      	ldrb	r1, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80067be:	b292      	uxth	r2, r2
 80067c0:	9202      	str	r2, [sp, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	9201      	str	r2, [sp, #4]
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	4603      	mov	r3, r0
 80067ca:	2280      	movs	r2, #128	; 0x80
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 ff77 	bl	80076c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	7959      	ldrb	r1, [r3, #5]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80067e6:	b292      	uxth	r2, r2
 80067e8:	9202      	str	r2, [sp, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	9201      	str	r2, [sp, #4]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	4603      	mov	r3, r0
 80067f2:	2200      	movs	r2, #0
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 ff63 	bl	80076c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80067fa:	e175      	b.n	8006ae8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	2b03      	cmp	r3, #3
 8006800:	f040 8172 	bne.w	8006ae8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800680a:	3301      	adds	r3, #1
 800680c:	b2da      	uxtb	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800681a:	2b03      	cmp	r3, #3
 800681c:	d903      	bls.n	8006826 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	220d      	movs	r2, #13
 8006822:	701a      	strb	r2, [r3, #0]
      break;
 8006824:	e160      	b.n	8006ae8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	795b      	ldrb	r3, [r3, #5]
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 ff97 	bl	8007760 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	791b      	ldrb	r3, [r3, #4]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 ff91 	bl	8007760 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
      break;
 8006844:	e150      	b.n	8006ae8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006846:	2112      	movs	r1, #18
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f9f1 	bl	8006c30 <USBH_Get_DevDesc>
 800684e:	4603      	mov	r3, r0
 8006850:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d103      	bne.n	8006860 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800685e:	e145      	b.n	8006aec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	2b03      	cmp	r3, #3
 8006864:	f040 8142 	bne.w	8006aec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800686e:	3301      	adds	r3, #1
 8006870:	b2da      	uxtb	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800687e:	2b03      	cmp	r3, #3
 8006880:	d903      	bls.n	800688a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	220d      	movs	r2, #13
 8006886:	701a      	strb	r2, [r3, #0]
      break;
 8006888:	e130      	b.n	8006aec <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	795b      	ldrb	r3, [r3, #5]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 ff65 	bl	8007760 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	791b      	ldrb	r3, [r3, #4]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 ff5f 	bl	8007760 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
      break;
 80068ae:	e11d      	b.n	8006aec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80068b0:	2101      	movs	r1, #1
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa68 	bl	8006d88 <USBH_SetAddress>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d132      	bne.n	8006928 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80068c2:	2002      	movs	r0, #2
 80068c4:	f001 fa42 	bl	8007d4c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2203      	movs	r2, #3
 80068d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	7919      	ldrb	r1, [r3, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80068ea:	b292      	uxth	r2, r2
 80068ec:	9202      	str	r2, [sp, #8]
 80068ee:	2200      	movs	r2, #0
 80068f0:	9201      	str	r2, [sp, #4]
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	4603      	mov	r3, r0
 80068f6:	2280      	movs	r2, #128	; 0x80
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fee1 	bl	80076c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7959      	ldrb	r1, [r3, #5]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006912:	b292      	uxth	r2, r2
 8006914:	9202      	str	r2, [sp, #8]
 8006916:	2200      	movs	r2, #0
 8006918:	9201      	str	r2, [sp, #4]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	4603      	mov	r3, r0
 800691e:	2200      	movs	r2, #0
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fecd 	bl	80076c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006926:	e0e3      	b.n	8006af0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	2b03      	cmp	r3, #3
 800692c:	f040 80e0 	bne.w	8006af0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	220d      	movs	r2, #13
 8006934:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	705a      	strb	r2, [r3, #1]
      break;
 800693c:	e0d8      	b.n	8006af0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800693e:	2109      	movs	r1, #9
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f99d 	bl	8006c80 <USBH_Get_CfgDesc>
 8006946:	4603      	mov	r3, r0
 8006948:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d103      	bne.n	8006958 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2204      	movs	r2, #4
 8006954:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006956:	e0cd      	b.n	8006af4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	2b03      	cmp	r3, #3
 800695c:	f040 80ca 	bne.w	8006af4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006966:	3301      	adds	r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006976:	2b03      	cmp	r3, #3
 8006978:	d903      	bls.n	8006982 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	220d      	movs	r2, #13
 800697e:	701a      	strb	r2, [r3, #0]
      break;
 8006980:	e0b8      	b.n	8006af4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	795b      	ldrb	r3, [r3, #5]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fee9 	bl	8007760 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	791b      	ldrb	r3, [r3, #4]
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fee3 	bl	8007760 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
      break;
 80069a6:	e0a5      	b.n	8006af4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f965 	bl	8006c80 <USBH_Get_CfgDesc>
 80069b6:	4603      	mov	r3, r0
 80069b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d103      	bne.n	80069c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2205      	movs	r2, #5
 80069c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80069c6:	e097      	b.n	8006af8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	f040 8094 	bne.w	8006af8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80069d6:	3301      	adds	r3, #1
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d903      	bls.n	80069f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	220d      	movs	r2, #13
 80069ee:	701a      	strb	r2, [r3, #0]
      break;
 80069f0:	e082      	b.n	8006af8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	795b      	ldrb	r3, [r3, #5]
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 feb1 	bl	8007760 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	791b      	ldrb	r3, [r3, #4]
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 feab 	bl	8007760 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]
      break;
 8006a16:	e06f      	b.n	8006af8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d019      	beq.n	8006a56 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006a2e:	23ff      	movs	r3, #255	; 0xff
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f949 	bl	8006cc8 <USBH_Get_StringDesc>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2206      	movs	r2, #6
 8006a44:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a46:	e059      	b.n	8006afc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d156      	bne.n	8006afc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2206      	movs	r2, #6
 8006a52:	705a      	strb	r2, [r3, #1]
      break;
 8006a54:	e052      	b.n	8006afc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2206      	movs	r2, #6
 8006a5a:	705a      	strb	r2, [r3, #1]
      break;
 8006a5c:	e04e      	b.n	8006afc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d019      	beq.n	8006a9c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006a74:	23ff      	movs	r3, #255	; 0xff
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f926 	bl	8006cc8 <USBH_Get_StringDesc>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2207      	movs	r2, #7
 8006a8a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a8c:	e038      	b.n	8006b00 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d135      	bne.n	8006b00 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2207      	movs	r2, #7
 8006a98:	705a      	strb	r2, [r3, #1]
      break;
 8006a9a:	e031      	b.n	8006b00 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2207      	movs	r2, #7
 8006aa0:	705a      	strb	r2, [r3, #1]
      break;
 8006aa2:	e02d      	b.n	8006b00 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d017      	beq.n	8006ade <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006aba:	23ff      	movs	r3, #255	; 0xff
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f903 	bl	8006cc8 <USBH_Get_StringDesc>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d102      	bne.n	8006ad2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006ad0:	e018      	b.n	8006b04 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d115      	bne.n	8006b04 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73fb      	strb	r3, [r7, #15]
      break;
 8006adc:	e012      	b.n	8006b04 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae2:	e00f      	b.n	8006b04 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006ae4:	bf00      	nop
 8006ae6:	e00e      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006ae8:	bf00      	nop
 8006aea:	e00c      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006aec:	bf00      	nop
 8006aee:	e00a      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006af0:	bf00      	nop
 8006af2:	e008      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006af4:	bf00      	nop
 8006af6:	e006      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006af8:	bf00      	nop
 8006afa:	e004      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006afc:	bf00      	nop
 8006afe:	e002      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006b00:	bf00      	nop
 8006b02:	e000      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006b04:	bf00      	nop
  }
  return Status;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f804 	bl	8006b52 <USBH_HandleSof>
}
 8006b4a:	bf00      	nop
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b0b      	cmp	r3, #11
 8006b62:	d10a      	bne.n	8006b7a <USBH_HandleSof+0x28>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
  }
}
 8006b7a:	bf00      	nop
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006b92:	bf00      	nop
}
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006bae:	bf00      	nop
}
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 ff56 	bl	8007aba <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	791b      	ldrb	r3, [r3, #4]
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fda3 	bl	8007760 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	795b      	ldrb	r3, [r3, #5]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fd9d 	bl	8007760 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c4e:	2100      	movs	r1, #0
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f864 	bl	8006d1e <USBH_GetDescriptor>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c6c:	78fa      	ldrb	r2, [r7, #3]
 8006c6e:	b292      	uxth	r2, r2
 8006c70:	4619      	mov	r1, r3
 8006c72:	f000 f918 	bl	8006ea6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	331c      	adds	r3, #28
 8006c90:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006c92:	887b      	ldrh	r3, [r7, #2]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f83d 	bl	8006d1e <USBH_GetDescriptor>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	72fb      	strb	r3, [r7, #11]
 8006ca8:	7afb      	ldrb	r3, [r7, #11]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d107      	bne.n	8006cbe <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006cb4:	887a      	ldrh	r2, [r7, #2]
 8006cb6:	68f9      	ldr	r1, [r7, #12]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 f964 	bl	8006f86 <USBH_ParseCfgDesc>
  }

  return status;
 8006cbe:	7afb      	ldrb	r3, [r7, #11]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	607a      	str	r2, [r7, #4]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	72fb      	strb	r3, [r7, #11]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006cdc:	7afb      	ldrb	r3, [r7, #11]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006ce4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006cec:	893b      	ldrh	r3, [r7, #8]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f812 	bl	8006d1e <USBH_GetDescriptor>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d107      	bne.n	8006d14 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d0a:	893a      	ldrh	r2, [r7, #8]
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fa37 	bl	8007182 <USBH_ParseStringDesc>
  }

  return status;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	72fb      	strb	r3, [r7, #11]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	789b      	ldrb	r3, [r3, #2]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d11c      	bne.n	8006d72 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006d38:	7afb      	ldrb	r3, [r7, #11]
 8006d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2206      	movs	r2, #6
 8006d48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	893a      	ldrh	r2, [r7, #8]
 8006d4e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006d50:	893b      	ldrh	r3, [r7, #8]
 8006d52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d5a:	d104      	bne.n	8006d66 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f240 4209 	movw	r2, #1033	; 0x409
 8006d62:	829a      	strh	r2, [r3, #20]
 8006d64:	e002      	b.n	8006d6c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8b3a      	ldrh	r2, [r7, #24]
 8006d70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006d72:	8b3b      	ldrh	r3, [r7, #24]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 fa50 	bl	800721e <USBH_CtlReq>
 8006d7e:	4603      	mov	r3, r0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	789b      	ldrb	r3, [r3, #2]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d10f      	bne.n	8006dbc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2205      	movs	r2, #5
 8006da6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fa2c 	bl	800721e <USBH_CtlReq>
 8006dc6:	4603      	mov	r3, r0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	789b      	ldrb	r3, [r3, #2]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d10e      	bne.n	8006e02 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2209      	movs	r2, #9
 8006dee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	887a      	ldrh	r2, [r7, #2]
 8006df4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006e02:	2200      	movs	r2, #0
 8006e04:	2100      	movs	r1, #0
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fa09 	bl	800721e <USBH_CtlReq>
 8006e0c:	4603      	mov	r3, r0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	789b      	ldrb	r3, [r3, #2]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d10f      	bne.n	8006e4a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2203      	movs	r2, #3
 8006e34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f9e5 	bl	800721e <USBH_CtlReq>
 8006e54:	4603      	mov	r3, r0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	789b      	ldrb	r3, [r3, #2]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d10f      	bne.n	8006e92 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006e92:	2200      	movs	r2, #0
 8006e94:	2100      	movs	r1, #0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f9c1 	bl	800721e <USBH_CtlReq>
 8006e9c:	4603      	mov	r3, r0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	781a      	ldrb	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	785a      	ldrb	r2, [r3, #1]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	3302      	adds	r3, #2
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	3303      	adds	r3, #3
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	791a      	ldrb	r2, [r3, #4]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	795a      	ldrb	r2, [r3, #5]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	799a      	ldrb	r2, [r3, #6]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	79da      	ldrb	r2, [r3, #7]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	d939      	bls.n	8006f7a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	3309      	adds	r3, #9
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	330a      	adds	r3, #10
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	330b      	adds	r3, #11
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	330c      	adds	r3, #12
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	330d      	adds	r3, #13
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	021b      	lsls	r3, r3, #8
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	4313      	orrs	r3, r2
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	7b9a      	ldrb	r2, [r3, #14]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	7bda      	ldrb	r2, [r3, #15]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	7c1a      	ldrb	r2, [r3, #16]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	7c5a      	ldrb	r2, [r3, #17]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	745a      	strb	r2, [r3, #17]
  }
}
 8006f7a:	bf00      	nop
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b08a      	sub	sp, #40	; 0x28
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	4613      	mov	r3, r2
 8006f92:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	781a      	ldrb	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	785a      	ldrb	r2, [r3, #1]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	3302      	adds	r3, #2
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	3303      	adds	r3, #3
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	791a      	ldrb	r2, [r3, #4]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	795a      	ldrb	r2, [r3, #5]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	799a      	ldrb	r2, [r3, #6]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	79da      	ldrb	r2, [r3, #7]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	7a1a      	ldrb	r2, [r3, #8]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	2b09      	cmp	r3, #9
 8007000:	d95f      	bls.n	80070c2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007002:	2309      	movs	r3, #9
 8007004:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007006:	2300      	movs	r3, #0
 8007008:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800700a:	e051      	b.n	80070b0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800700c:	f107 0316 	add.w	r3, r7, #22
 8007010:	4619      	mov	r1, r3
 8007012:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007014:	f000 f8e8 	bl	80071e8 <USBH_GetNextDesc>
 8007018:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	2b04      	cmp	r3, #4
 8007020:	d146      	bne.n	80070b0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007022:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007026:	221a      	movs	r2, #26
 8007028:	fb02 f303 	mul.w	r3, r2, r3
 800702c:	3308      	adds	r3, #8
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4413      	add	r3, r2
 8007032:	3302      	adds	r3, #2
 8007034:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007038:	69f8      	ldr	r0, [r7, #28]
 800703a:	f000 f846 	bl	80070ca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007044:	2300      	movs	r3, #0
 8007046:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007048:	e022      	b.n	8007090 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800704a:	f107 0316 	add.w	r3, r7, #22
 800704e:	4619      	mov	r1, r3
 8007050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007052:	f000 f8c9 	bl	80071e8 <USBH_GetNextDesc>
 8007056:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b05      	cmp	r3, #5
 800705e:	d117      	bne.n	8007090 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007064:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007068:	3201      	adds	r2, #1
 800706a:	00d2      	lsls	r2, r2, #3
 800706c:	211a      	movs	r1, #26
 800706e:	fb01 f303 	mul.w	r3, r1, r3
 8007072:	4413      	add	r3, r2
 8007074:	3308      	adds	r3, #8
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	3304      	adds	r3, #4
 800707c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800707e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007080:	69b8      	ldr	r0, [r7, #24]
 8007082:	f000 f851 	bl	8007128 <USBH_ParseEPDesc>
            ep_ix++;
 8007086:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800708a:	3301      	adds	r3, #1
 800708c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	791b      	ldrb	r3, [r3, #4]
 8007094:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007098:	429a      	cmp	r2, r3
 800709a:	d204      	bcs.n	80070a6 <USBH_ParseCfgDesc+0x120>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	885a      	ldrh	r2, [r3, #2]
 80070a0:	8afb      	ldrh	r3, [r7, #22]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d8d1      	bhi.n	800704a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80070a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070aa:	3301      	adds	r3, #1
 80070ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80070b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d804      	bhi.n	80070c2 <USBH_ParseCfgDesc+0x13c>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	885a      	ldrh	r2, [r3, #2]
 80070bc:	8afb      	ldrh	r3, [r7, #22]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d8a4      	bhi.n	800700c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80070c2:	bf00      	nop
 80070c4:	3728      	adds	r7, #40	; 0x28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781a      	ldrb	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	785a      	ldrb	r2, [r3, #1]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	789a      	ldrb	r2, [r3, #2]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	78da      	ldrb	r2, [r3, #3]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	791a      	ldrb	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	795a      	ldrb	r2, [r3, #5]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	799a      	ldrb	r2, [r3, #6]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	79da      	ldrb	r2, [r3, #7]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	7a1a      	ldrb	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	721a      	strb	r2, [r3, #8]
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	785a      	ldrb	r2, [r3, #1]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	789a      	ldrb	r2, [r3, #2]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	78da      	ldrb	r2, [r3, #3]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	3304      	adds	r3, #4
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	b29a      	uxth	r2, r3
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	3305      	adds	r3, #5
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	b29b      	uxth	r3, r3
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	b29b      	uxth	r3, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	b29a      	uxth	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	799a      	ldrb	r2, [r3, #6]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	719a      	strb	r2, [r3, #6]
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007182:	b480      	push	{r7}
 8007184:	b087      	sub	sp, #28
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	4613      	mov	r3, r2
 800718e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3301      	adds	r3, #1
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b03      	cmp	r3, #3
 8007198:	d120      	bne.n	80071dc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	1e9a      	subs	r2, r3, #2
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	4293      	cmp	r3, r2
 80071a4:	bf28      	it	cs
 80071a6:	4613      	movcs	r3, r2
 80071a8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3302      	adds	r3, #2
 80071ae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80071b0:	2300      	movs	r3, #0
 80071b2:	82fb      	strh	r3, [r7, #22]
 80071b4:	e00b      	b.n	80071ce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80071b6:	8afb      	ldrh	r3, [r7, #22]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4413      	add	r3, r2
 80071bc:	781a      	ldrb	r2, [r3, #0]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	3301      	adds	r3, #1
 80071c6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80071c8:	8afb      	ldrh	r3, [r7, #22]
 80071ca:	3302      	adds	r3, #2
 80071cc:	82fb      	strh	r3, [r7, #22]
 80071ce:	8afa      	ldrh	r2, [r7, #22]
 80071d0:	8abb      	ldrh	r3, [r7, #20]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d3ef      	bcc.n	80071b6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]
  }
}
 80071dc:	bf00      	nop
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	881a      	ldrh	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4413      	add	r3, r2
 80071fe:	b29a      	uxth	r2, r3
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4413      	add	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007210:	68fb      	ldr	r3, [r7, #12]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b086      	sub	sp, #24
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	4613      	mov	r3, r2
 800722a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800722c:	2301      	movs	r3, #1
 800722e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	789b      	ldrb	r3, [r3, #2]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d002      	beq.n	800723e <USBH_CtlReq+0x20>
 8007238:	2b02      	cmp	r3, #2
 800723a:	d00f      	beq.n	800725c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800723c:	e027      	b.n	800728e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	88fa      	ldrh	r2, [r7, #6]
 8007248:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2202      	movs	r2, #2
 8007254:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007256:	2301      	movs	r3, #1
 8007258:	75fb      	strb	r3, [r7, #23]
      break;
 800725a:	e018      	b.n	800728e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f81b 	bl	8007298 <USBH_HandleControl>
 8007262:	4603      	mov	r3, r0
 8007264:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <USBH_CtlReq+0x54>
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	2b03      	cmp	r3, #3
 8007270:	d106      	bne.n	8007280 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2201      	movs	r2, #1
 8007276:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	761a      	strb	r2, [r3, #24]
      break;
 800727e:	e005      	b.n	800728c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d102      	bne.n	800728c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	709a      	strb	r2, [r3, #2]
      break;
 800728c:	bf00      	nop
  }
  return status;
 800728e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af02      	add	r7, sp, #8
 800729e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80072a0:	2301      	movs	r3, #1
 80072a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7e1b      	ldrb	r3, [r3, #24]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	2b0a      	cmp	r3, #10
 80072b0:	f200 8156 	bhi.w	8007560 <USBH_HandleControl+0x2c8>
 80072b4:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <USBH_HandleControl+0x24>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	080072e9 	.word	0x080072e9
 80072c0:	08007303 	.word	0x08007303
 80072c4:	0800736d 	.word	0x0800736d
 80072c8:	08007393 	.word	0x08007393
 80072cc:	080073cb 	.word	0x080073cb
 80072d0:	080073f5 	.word	0x080073f5
 80072d4:	08007447 	.word	0x08007447
 80072d8:	08007469 	.word	0x08007469
 80072dc:	080074a5 	.word	0x080074a5
 80072e0:	080074cb 	.word	0x080074cb
 80072e4:	08007509 	.word	0x08007509
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f103 0110 	add.w	r1, r3, #16
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	795b      	ldrb	r3, [r3, #5]
 80072f2:	461a      	mov	r2, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f943 	bl	8007580 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2202      	movs	r2, #2
 80072fe:	761a      	strb	r2, [r3, #24]
      break;
 8007300:	e139      	b.n	8007576 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	795b      	ldrb	r3, [r3, #5]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fcc5 	bl	8007c98 <USBH_LL_GetURBState>
 800730e:	4603      	mov	r3, r0
 8007310:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d11e      	bne.n	8007356 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7c1b      	ldrb	r3, [r3, #16]
 800731c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007320:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	8adb      	ldrh	r3, [r3, #22]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800732a:	7b7b      	ldrb	r3, [r7, #13]
 800732c:	2b80      	cmp	r3, #128	; 0x80
 800732e:	d103      	bne.n	8007338 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2203      	movs	r2, #3
 8007334:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007336:	e115      	b.n	8007564 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2205      	movs	r2, #5
 800733c:	761a      	strb	r2, [r3, #24]
      break;
 800733e:	e111      	b.n	8007564 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007340:	7b7b      	ldrb	r3, [r7, #13]
 8007342:	2b80      	cmp	r3, #128	; 0x80
 8007344:	d103      	bne.n	800734e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2209      	movs	r2, #9
 800734a:	761a      	strb	r2, [r3, #24]
      break;
 800734c:	e10a      	b.n	8007564 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2207      	movs	r2, #7
 8007352:	761a      	strb	r2, [r3, #24]
      break;
 8007354:	e106      	b.n	8007564 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b04      	cmp	r3, #4
 800735a:	d003      	beq.n	8007364 <USBH_HandleControl+0xcc>
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	2b02      	cmp	r3, #2
 8007360:	f040 8100 	bne.w	8007564 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	220b      	movs	r2, #11
 8007368:	761a      	strb	r2, [r3, #24]
      break;
 800736a:	e0fb      	b.n	8007564 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007372:	b29a      	uxth	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6899      	ldr	r1, [r3, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	899a      	ldrh	r2, [r3, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	791b      	ldrb	r3, [r3, #4]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f93a 	bl	80075fe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2204      	movs	r2, #4
 800738e:	761a      	strb	r2, [r3, #24]
      break;
 8007390:	e0f1      	b.n	8007576 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	791b      	ldrb	r3, [r3, #4]
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fc7d 	bl	8007c98 <USBH_LL_GetURBState>
 800739e:	4603      	mov	r3, r0
 80073a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d102      	bne.n	80073ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2209      	movs	r2, #9
 80073ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	2b05      	cmp	r3, #5
 80073b2:	d102      	bne.n	80073ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80073b4:	2303      	movs	r3, #3
 80073b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80073b8:	e0d6      	b.n	8007568 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b04      	cmp	r3, #4
 80073be:	f040 80d3 	bne.w	8007568 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	220b      	movs	r2, #11
 80073c6:	761a      	strb	r2, [r3, #24]
      break;
 80073c8:	e0ce      	b.n	8007568 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6899      	ldr	r1, [r3, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	899a      	ldrh	r2, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	795b      	ldrb	r3, [r3, #5]
 80073d6:	2001      	movs	r0, #1
 80073d8:	9000      	str	r0, [sp, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f8ea 	bl	80075b4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2206      	movs	r2, #6
 80073f0:	761a      	strb	r2, [r3, #24]
      break;
 80073f2:	e0c0      	b.n	8007576 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	795b      	ldrb	r3, [r3, #5]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fc4c 	bl	8007c98 <USBH_LL_GetURBState>
 8007400:	4603      	mov	r3, r0
 8007402:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d103      	bne.n	8007412 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2207      	movs	r2, #7
 800740e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007410:	e0ac      	b.n	800756c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b05      	cmp	r3, #5
 8007416:	d105      	bne.n	8007424 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	220c      	movs	r2, #12
 800741c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800741e:	2303      	movs	r3, #3
 8007420:	73fb      	strb	r3, [r7, #15]
      break;
 8007422:	e0a3      	b.n	800756c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d103      	bne.n	8007432 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2205      	movs	r2, #5
 800742e:	761a      	strb	r2, [r3, #24]
      break;
 8007430:	e09c      	b.n	800756c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	2b04      	cmp	r3, #4
 8007436:	f040 8099 	bne.w	800756c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	220b      	movs	r2, #11
 800743e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007440:	2302      	movs	r3, #2
 8007442:	73fb      	strb	r3, [r7, #15]
      break;
 8007444:	e092      	b.n	800756c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	791b      	ldrb	r3, [r3, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8d5 	bl	80075fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2208      	movs	r2, #8
 8007464:	761a      	strb	r2, [r3, #24]

      break;
 8007466:	e086      	b.n	8007576 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	791b      	ldrb	r3, [r3, #4]
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fc12 	bl	8007c98 <USBH_LL_GetURBState>
 8007474:	4603      	mov	r3, r0
 8007476:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d105      	bne.n	800748a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	220d      	movs	r2, #13
 8007482:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007488:	e072      	b.n	8007570 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b04      	cmp	r3, #4
 800748e:	d103      	bne.n	8007498 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	220b      	movs	r2, #11
 8007494:	761a      	strb	r2, [r3, #24]
      break;
 8007496:	e06b      	b.n	8007570 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b05      	cmp	r3, #5
 800749c:	d168      	bne.n	8007570 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800749e:	2303      	movs	r3, #3
 80074a0:	73fb      	strb	r3, [r7, #15]
      break;
 80074a2:	e065      	b.n	8007570 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	795b      	ldrb	r3, [r3, #5]
 80074a8:	2201      	movs	r2, #1
 80074aa:	9200      	str	r2, [sp, #0]
 80074ac:	2200      	movs	r2, #0
 80074ae:	2100      	movs	r1, #0
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f87f 	bl	80075b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074bc:	b29a      	uxth	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	220a      	movs	r2, #10
 80074c6:	761a      	strb	r2, [r3, #24]
      break;
 80074c8:	e055      	b.n	8007576 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	795b      	ldrb	r3, [r3, #5]
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fbe1 	bl	8007c98 <USBH_LL_GetURBState>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d105      	bne.n	80074ec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	220d      	movs	r2, #13
 80074e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80074ea:	e043      	b.n	8007574 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d103      	bne.n	80074fa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2209      	movs	r2, #9
 80074f6:	761a      	strb	r2, [r3, #24]
      break;
 80074f8:	e03c      	b.n	8007574 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d139      	bne.n	8007574 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	220b      	movs	r2, #11
 8007504:	761a      	strb	r2, [r3, #24]
      break;
 8007506:	e035      	b.n	8007574 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	7e5b      	ldrb	r3, [r3, #25]
 800750c:	3301      	adds	r3, #1
 800750e:	b2da      	uxtb	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	765a      	strb	r2, [r3, #25]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	7e5b      	ldrb	r3, [r3, #25]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d806      	bhi.n	800752a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007528:	e025      	b.n	8007576 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007530:	2106      	movs	r1, #6
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	795b      	ldrb	r3, [r3, #5]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f90c 	bl	8007760 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	791b      	ldrb	r3, [r3, #4]
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f906 	bl	8007760 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800755a:	2302      	movs	r3, #2
 800755c:	73fb      	strb	r3, [r7, #15]
      break;
 800755e:	e00a      	b.n	8007576 <USBH_HandleControl+0x2de>

    default:
      break;
 8007560:	bf00      	nop
 8007562:	e008      	b.n	8007576 <USBH_HandleControl+0x2de>
      break;
 8007564:	bf00      	nop
 8007566:	e006      	b.n	8007576 <USBH_HandleControl+0x2de>
      break;
 8007568:	bf00      	nop
 800756a:	e004      	b.n	8007576 <USBH_HandleControl+0x2de>
      break;
 800756c:	bf00      	nop
 800756e:	e002      	b.n	8007576 <USBH_HandleControl+0x2de>
      break;
 8007570:	bf00      	nop
 8007572:	e000      	b.n	8007576 <USBH_HandleControl+0x2de>
      break;
 8007574:	bf00      	nop
  }

  return status;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af04      	add	r7, sp, #16
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	4613      	mov	r3, r2
 800758c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800758e:	79f9      	ldrb	r1, [r7, #7]
 8007590:	2300      	movs	r3, #0
 8007592:	9303      	str	r3, [sp, #12]
 8007594:	2308      	movs	r3, #8
 8007596:	9302      	str	r3, [sp, #8]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	2300      	movs	r3, #0
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	2300      	movs	r3, #0
 80075a2:	2200      	movs	r2, #0
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fb46 	bl	8007c36 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b088      	sub	sp, #32
 80075b8:	af04      	add	r7, sp, #16
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	4611      	mov	r1, r2
 80075c0:	461a      	mov	r2, r3
 80075c2:	460b      	mov	r3, r1
 80075c4:	80fb      	strh	r3, [r7, #6]
 80075c6:	4613      	mov	r3, r2
 80075c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80075d8:	7979      	ldrb	r1, [r7, #5]
 80075da:	7e3b      	ldrb	r3, [r7, #24]
 80075dc:	9303      	str	r3, [sp, #12]
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	9302      	str	r3, [sp, #8]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	2301      	movs	r3, #1
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	2300      	movs	r3, #0
 80075ec:	2200      	movs	r2, #0
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fb21 	bl	8007c36 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b088      	sub	sp, #32
 8007602:	af04      	add	r7, sp, #16
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	4611      	mov	r1, r2
 800760a:	461a      	mov	r2, r3
 800760c:	460b      	mov	r3, r1
 800760e:	80fb      	strh	r3, [r7, #6]
 8007610:	4613      	mov	r3, r2
 8007612:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007614:	7979      	ldrb	r1, [r7, #5]
 8007616:	2300      	movs	r3, #0
 8007618:	9303      	str	r3, [sp, #12]
 800761a:	88fb      	ldrh	r3, [r7, #6]
 800761c:	9302      	str	r3, [sp, #8]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	2301      	movs	r3, #1
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	2300      	movs	r3, #0
 8007628:	2201      	movs	r2, #1
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 fb03 	bl	8007c36 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007630:	2300      	movs	r3, #0

}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b088      	sub	sp, #32
 800763e:	af04      	add	r7, sp, #16
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	4611      	mov	r1, r2
 8007646:	461a      	mov	r2, r3
 8007648:	460b      	mov	r3, r1
 800764a:	80fb      	strh	r3, [r7, #6]
 800764c:	4613      	mov	r3, r2
 800764e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800765e:	7979      	ldrb	r1, [r7, #5]
 8007660:	7e3b      	ldrb	r3, [r7, #24]
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	2301      	movs	r3, #1
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	2302      	movs	r3, #2
 8007672:	2200      	movs	r2, #0
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 fade 	bl	8007c36 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af04      	add	r7, sp, #16
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	4611      	mov	r1, r2
 8007690:	461a      	mov	r2, r3
 8007692:	460b      	mov	r3, r1
 8007694:	80fb      	strh	r3, [r7, #6]
 8007696:	4613      	mov	r3, r2
 8007698:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800769a:	7979      	ldrb	r1, [r7, #5]
 800769c:	2300      	movs	r3, #0
 800769e:	9303      	str	r3, [sp, #12]
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	2301      	movs	r3, #1
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	2302      	movs	r3, #2
 80076ae:	2201      	movs	r2, #1
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 fac0 	bl	8007c36 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af04      	add	r7, sp, #16
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	70fb      	strb	r3, [r7, #3]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70bb      	strb	r3, [r7, #2]
 80076d6:	4613      	mov	r3, r2
 80076d8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80076da:	7878      	ldrb	r0, [r7, #1]
 80076dc:	78ba      	ldrb	r2, [r7, #2]
 80076de:	78f9      	ldrb	r1, [r7, #3]
 80076e0:	8b3b      	ldrh	r3, [r7, #24]
 80076e2:	9302      	str	r3, [sp, #8]
 80076e4:	7d3b      	ldrb	r3, [r7, #20]
 80076e6:	9301      	str	r3, [sp, #4]
 80076e8:	7c3b      	ldrb	r3, [r7, #16]
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	4603      	mov	r3, r0
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fa53 	bl	8007b9a <USBH_LL_OpenPipe>

  return USBH_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800770a:	78fb      	ldrb	r3, [r7, #3]
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa72 	bl	8007bf8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f836 	bl	800779c <USBH_GetFreePipe>
 8007730:	4603      	mov	r3, r0
 8007732:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007734:	89fb      	ldrh	r3, [r7, #14]
 8007736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800773a:	4293      	cmp	r3, r2
 800773c:	d00a      	beq.n	8007754 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800773e:	78fa      	ldrb	r2, [r7, #3]
 8007740:	89fb      	ldrh	r3, [r7, #14]
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	33e0      	adds	r3, #224	; 0xe0
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	440b      	add	r3, r1
 8007752:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007754:	89fb      	ldrh	r3, [r7, #14]
 8007756:	b2db      	uxtb	r3, r3
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	2b0a      	cmp	r3, #10
 8007770:	d80d      	bhi.n	800778e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	33e0      	adds	r3, #224	; 0xe0
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	33e0      	adds	r3, #224	; 0xe0
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	440b      	add	r3, r1
 800778c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
 80077ac:	e00f      	b.n	80077ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	33e0      	adds	r3, #224	; 0xe0
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d102      	bne.n	80077c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	e007      	b.n	80077d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	3301      	adds	r3, #1
 80077cc:	73fb      	strb	r3, [r7, #15]
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	2b0a      	cmp	r3, #10
 80077d2:	d9ec      	bls.n	80077ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80077d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80077e8:	2201      	movs	r2, #1
 80077ea:	490e      	ldr	r1, [pc, #56]	; (8007824 <MX_USB_HOST_Init+0x40>)
 80077ec:	480e      	ldr	r0, [pc, #56]	; (8007828 <MX_USB_HOST_Init+0x44>)
 80077ee:	f7fe fca1 	bl	8006134 <USBH_Init>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80077f8:	f7f9 f920 	bl	8000a3c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80077fc:	490b      	ldr	r1, [pc, #44]	; (800782c <MX_USB_HOST_Init+0x48>)
 80077fe:	480a      	ldr	r0, [pc, #40]	; (8007828 <MX_USB_HOST_Init+0x44>)
 8007800:	f7fe fd26 	bl	8006250 <USBH_RegisterClass>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800780a:	f7f9 f917 	bl	8000a3c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800780e:	4806      	ldr	r0, [pc, #24]	; (8007828 <MX_USB_HOST_Init+0x44>)
 8007810:	f7fe fdaa 	bl	8006368 <USBH_Start>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800781a:	f7f9 f90f 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800781e:	bf00      	nop
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	08007845 	.word	0x08007845
 8007828:	20000208 	.word	0x20000208
 800782c:	2000000c 	.word	0x2000000c

08007830 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007834:	4802      	ldr	r0, [pc, #8]	; (8007840 <MX_USB_HOST_Process+0x10>)
 8007836:	f7fe fda7 	bl	8006388 <USBH_Process>
}
 800783a:	bf00      	nop
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20000208 	.word	0x20000208

08007844 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	3b01      	subs	r3, #1
 8007854:	2b04      	cmp	r3, #4
 8007856:	d819      	bhi.n	800788c <USBH_UserProcess+0x48>
 8007858:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <USBH_UserProcess+0x1c>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	0800788d 	.word	0x0800788d
 8007864:	0800787d 	.word	0x0800787d
 8007868:	0800788d 	.word	0x0800788d
 800786c:	08007885 	.word	0x08007885
 8007870:	08007875 	.word	0x08007875
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007874:	4b09      	ldr	r3, [pc, #36]	; (800789c <USBH_UserProcess+0x58>)
 8007876:	2203      	movs	r2, #3
 8007878:	701a      	strb	r2, [r3, #0]
  break;
 800787a:	e008      	b.n	800788e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800787c:	4b07      	ldr	r3, [pc, #28]	; (800789c <USBH_UserProcess+0x58>)
 800787e:	2202      	movs	r2, #2
 8007880:	701a      	strb	r2, [r3, #0]
  break;
 8007882:	e004      	b.n	800788e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007884:	4b05      	ldr	r3, [pc, #20]	; (800789c <USBH_UserProcess+0x58>)
 8007886:	2201      	movs	r2, #1
 8007888:	701a      	strb	r2, [r3, #0]
  break;
 800788a:	e000      	b.n	800788e <USBH_UserProcess+0x4a>

  default:
  break;
 800788c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	200000b0 	.word	0x200000b0

080078a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08a      	sub	sp, #40	; 0x28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a8:	f107 0314 	add.w	r3, r7, #20
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	605a      	str	r2, [r3, #4]
 80078b2:	609a      	str	r2, [r3, #8]
 80078b4:	60da      	str	r2, [r3, #12]
 80078b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078c0:	d147      	bne.n	8007952 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078c2:	2300      	movs	r3, #0
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	4b25      	ldr	r3, [pc, #148]	; (800795c <HAL_HCD_MspInit+0xbc>)
 80078c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ca:	4a24      	ldr	r2, [pc, #144]	; (800795c <HAL_HCD_MspInit+0xbc>)
 80078cc:	f043 0301 	orr.w	r3, r3, #1
 80078d0:	6313      	str	r3, [r2, #48]	; 0x30
 80078d2:	4b22      	ldr	r3, [pc, #136]	; (800795c <HAL_HCD_MspInit+0xbc>)
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80078de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80078ec:	f107 0314 	add.w	r3, r7, #20
 80078f0:	4619      	mov	r1, r3
 80078f2:	481b      	ldr	r0, [pc, #108]	; (8007960 <HAL_HCD_MspInit+0xc0>)
 80078f4:	f7f9 fc40 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80078f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80078fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078fe:	2302      	movs	r3, #2
 8007900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007902:	2300      	movs	r3, #0
 8007904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007906:	2300      	movs	r3, #0
 8007908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800790a:	230a      	movs	r3, #10
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800790e:	f107 0314 	add.w	r3, r7, #20
 8007912:	4619      	mov	r1, r3
 8007914:	4812      	ldr	r0, [pc, #72]	; (8007960 <HAL_HCD_MspInit+0xc0>)
 8007916:	f7f9 fc2f 	bl	8001178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800791a:	4b10      	ldr	r3, [pc, #64]	; (800795c <HAL_HCD_MspInit+0xbc>)
 800791c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791e:	4a0f      	ldr	r2, [pc, #60]	; (800795c <HAL_HCD_MspInit+0xbc>)
 8007920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007924:	6353      	str	r3, [r2, #52]	; 0x34
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	4b0c      	ldr	r3, [pc, #48]	; (800795c <HAL_HCD_MspInit+0xbc>)
 800792c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792e:	4a0b      	ldr	r2, [pc, #44]	; (800795c <HAL_HCD_MspInit+0xbc>)
 8007930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007934:	6453      	str	r3, [r2, #68]	; 0x44
 8007936:	4b09      	ldr	r3, [pc, #36]	; (800795c <HAL_HCD_MspInit+0xbc>)
 8007938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007942:	2200      	movs	r2, #0
 8007944:	2100      	movs	r1, #0
 8007946:	2043      	movs	r0, #67	; 0x43
 8007948:	f7f9 fbdf 	bl	800110a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800794c:	2043      	movs	r0, #67	; 0x43
 800794e:	f7f9 fbf8 	bl	8001142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007952:	bf00      	nop
 8007954:	3728      	adds	r7, #40	; 0x28
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	40023800 	.word	0x40023800
 8007960:	40020000 	.word	0x40020000

08007964 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007972:	4618      	mov	r0, r3
 8007974:	f7ff f8db 	bl	8006b2e <USBH_LL_IncTimer>
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff f913 	bl	8006bba <USBH_LL_Connect>
}
 8007994:	bf00      	nop
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff f91c 	bl	8006be8 <USBH_LL_Disconnect>
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
 80079c4:	4613      	mov	r3, r2
 80079c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff f8cd 	bl	8006b82 <USBH_LL_PortEnabled>
}
 80079e8:	bf00      	nop
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff f8cd 	bl	8006b9e <USBH_LL_PortDisabled>
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d12a      	bne.n	8007a74 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007a1e:	4a18      	ldr	r2, [pc, #96]	; (8007a80 <USBH_LL_Init+0x74>)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a15      	ldr	r2, [pc, #84]	; (8007a80 <USBH_LL_Init+0x74>)
 8007a2a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a2e:	4b14      	ldr	r3, [pc, #80]	; (8007a80 <USBH_LL_Init+0x74>)
 8007a30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a34:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007a36:	4b12      	ldr	r3, [pc, #72]	; (8007a80 <USBH_LL_Init+0x74>)
 8007a38:	2208      	movs	r2, #8
 8007a3a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007a3c:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <USBH_LL_Init+0x74>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a42:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <USBH_LL_Init+0x74>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007a48:	4b0d      	ldr	r3, [pc, #52]	; (8007a80 <USBH_LL_Init+0x74>)
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a4e:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <USBH_LL_Init+0x74>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007a54:	480a      	ldr	r0, [pc, #40]	; (8007a80 <USBH_LL_Init+0x74>)
 8007a56:	f7f9 fd75 	bl	8001544 <HAL_HCD_Init>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007a60:	f7f8 ffec 	bl	8000a3c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007a64:	4806      	ldr	r0, [pc, #24]	; (8007a80 <USBH_LL_Init+0x74>)
 8007a66:	f7fa f951 	bl	8001d0c <HAL_HCD_GetCurrentFrame>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7ff f84e 	bl	8006b10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	200005e0 	.word	0x200005e0

08007a84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fa f8c0 	bl	8001c20 <HAL_HCD_Start>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 f95c 	bl	8007d64 <USBH_Get_USB_Status>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fa f8c8 	bl	8001c66 <HAL_HCD_Stop>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 f941 	bl	8007d64 <USBH_Get_USB_Status>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007af8:	2301      	movs	r3, #1
 8007afa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fa f910 	bl	8001d28 <HAL_HCD_GetCurrentSpeed>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d00c      	beq.n	8007b28 <USBH_LL_GetSpeed+0x38>
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d80d      	bhi.n	8007b2e <USBH_LL_GetSpeed+0x3e>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <USBH_LL_GetSpeed+0x2c>
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d003      	beq.n	8007b22 <USBH_LL_GetSpeed+0x32>
 8007b1a:	e008      	b.n	8007b2e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b20:	e008      	b.n	8007b34 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007b22:	2301      	movs	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
    break;
 8007b26:	e005      	b.n	8007b34 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007b28:	2302      	movs	r3, #2
 8007b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b2c:	e002      	b.n	8007b34 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	73fb      	strb	r3, [r7, #15]
    break;
 8007b32:	bf00      	nop
  }
  return  speed;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fa f8a3 	bl	8001ca0 <HAL_HCD_ResetPort>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 f8ff 	bl	8007d64 <USBH_Get_USB_Status>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fa f8aa 	bl	8001ce4 <HAL_HCD_HC_GetXferCount>
 8007b90:	4603      	mov	r3, r0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b9a:	b590      	push	{r4, r7, lr}
 8007b9c:	b089      	sub	sp, #36	; 0x24
 8007b9e:	af04      	add	r7, sp, #16
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	4608      	mov	r0, r1
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	4603      	mov	r3, r0
 8007baa:	70fb      	strb	r3, [r7, #3]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70bb      	strb	r3, [r7, #2]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007bc2:	787c      	ldrb	r4, [r7, #1]
 8007bc4:	78ba      	ldrb	r2, [r7, #2]
 8007bc6:	78f9      	ldrb	r1, [r7, #3]
 8007bc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bca:	9302      	str	r3, [sp, #8]
 8007bcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	4623      	mov	r3, r4
 8007bda:	f7f9 fd15 	bl	8001608 <HAL_HCD_HC_Init>
 8007bde:	4603      	mov	r3, r0
 8007be0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 f8bd 	bl	8007d64 <USBH_Get_USB_Status>
 8007bea:	4603      	mov	r3, r0
 8007bec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd90      	pop	{r4, r7, pc}

08007bf8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c12:	78fa      	ldrb	r2, [r7, #3]
 8007c14:	4611      	mov	r1, r2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7f9 fd85 	bl	8001726 <HAL_HCD_HC_Halt>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f89e 	bl	8007d64 <USBH_Get_USB_Status>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007c36:	b590      	push	{r4, r7, lr}
 8007c38:	b089      	sub	sp, #36	; 0x24
 8007c3a:	af04      	add	r7, sp, #16
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	4608      	mov	r0, r1
 8007c40:	4611      	mov	r1, r2
 8007c42:	461a      	mov	r2, r3
 8007c44:	4603      	mov	r3, r0
 8007c46:	70fb      	strb	r3, [r7, #3]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70bb      	strb	r3, [r7, #2]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007c5e:	787c      	ldrb	r4, [r7, #1]
 8007c60:	78ba      	ldrb	r2, [r7, #2]
 8007c62:	78f9      	ldrb	r1, [r7, #3]
 8007c64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c68:	9303      	str	r3, [sp, #12]
 8007c6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c6c:	9302      	str	r3, [sp, #8]
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	4623      	mov	r3, r4
 8007c7a:	f7f9 fd77 	bl	800176c <HAL_HCD_HC_SubmitRequest>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f86d 	bl	8007d64 <USBH_Get_USB_Status>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd90      	pop	{r4, r7, pc}

08007c98 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007caa:	78fa      	ldrb	r2, [r7, #3]
 8007cac:	4611      	mov	r1, r2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fa f804 	bl	8001cbc <HAL_HCD_HC_GetURBState>
 8007cb4:	4603      	mov	r3, r0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d103      	bne.n	8007cdc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f870 	bl	8007dbc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007cdc:	20c8      	movs	r0, #200	; 0xc8
 8007cde:	f7f9 f915 	bl	8000f0c <HAL_Delay>
  return USBH_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d02:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	212c      	movs	r1, #44	; 0x2c
 8007d0a:	fb01 f303 	mul.w	r3, r1, r3
 8007d0e:	4413      	add	r3, r2
 8007d10:	333b      	adds	r3, #59	; 0x3b
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	212c      	movs	r1, #44	; 0x2c
 8007d1e:	fb01 f303 	mul.w	r3, r1, r3
 8007d22:	4413      	add	r3, r2
 8007d24:	3354      	adds	r3, #84	; 0x54
 8007d26:	78ba      	ldrb	r2, [r7, #2]
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	e008      	b.n	8007d3e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	212c      	movs	r1, #44	; 0x2c
 8007d32:	fb01 f303 	mul.w	r3, r1, r3
 8007d36:	4413      	add	r3, r2
 8007d38:	3355      	adds	r3, #85	; 0x55
 8007d3a:	78ba      	ldrb	r2, [r7, #2]
 8007d3c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7f9 f8d9 	bl	8000f0c <HAL_Delay>
}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d817      	bhi.n	8007da8 <USBH_Get_USB_Status+0x44>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <USBH_Get_USB_Status+0x1c>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007d91 	.word	0x08007d91
 8007d84:	08007d97 	.word	0x08007d97
 8007d88:	08007d9d 	.word	0x08007d9d
 8007d8c:	08007da3 	.word	0x08007da3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]
    break;
 8007d94:	e00b      	b.n	8007dae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007d96:	2302      	movs	r3, #2
 8007d98:	73fb      	strb	r3, [r7, #15]
    break;
 8007d9a:	e008      	b.n	8007dae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007da0:	e005      	b.n	8007dae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007da2:	2302      	movs	r3, #2
 8007da4:	73fb      	strb	r3, [r7, #15]
    break;
 8007da6:	e002      	b.n	8007dae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007da8:	2302      	movs	r3, #2
 8007daa:	73fb      	strb	r3, [r7, #15]
    break;
 8007dac:	bf00      	nop
  }
  return usb_status;
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d102      	bne.n	8007dd6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	73fb      	strb	r3, [r7, #15]
 8007dd4:	e001      	b.n	8007dda <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	2101      	movs	r1, #1
 8007de0:	4803      	ldr	r0, [pc, #12]	; (8007df0 <MX_DriverVbusFS+0x34>)
 8007de2:	f7f9 fb7d 	bl	80014e0 <HAL_GPIO_WritePin>
}
 8007de6:	bf00      	nop
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40020800 	.word	0x40020800

08007df4 <__errno>:
 8007df4:	4b01      	ldr	r3, [pc, #4]	; (8007dfc <__errno+0x8>)
 8007df6:	6818      	ldr	r0, [r3, #0]
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	2000002c 	.word	0x2000002c

08007e00 <__libc_init_array>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	4d0d      	ldr	r5, [pc, #52]	; (8007e38 <__libc_init_array+0x38>)
 8007e04:	4c0d      	ldr	r4, [pc, #52]	; (8007e3c <__libc_init_array+0x3c>)
 8007e06:	1b64      	subs	r4, r4, r5
 8007e08:	10a4      	asrs	r4, r4, #2
 8007e0a:	2600      	movs	r6, #0
 8007e0c:	42a6      	cmp	r6, r4
 8007e0e:	d109      	bne.n	8007e24 <__libc_init_array+0x24>
 8007e10:	4d0b      	ldr	r5, [pc, #44]	; (8007e40 <__libc_init_array+0x40>)
 8007e12:	4c0c      	ldr	r4, [pc, #48]	; (8007e44 <__libc_init_array+0x44>)
 8007e14:	f000 f8f8 	bl	8008008 <_init>
 8007e18:	1b64      	subs	r4, r4, r5
 8007e1a:	10a4      	asrs	r4, r4, #2
 8007e1c:	2600      	movs	r6, #0
 8007e1e:	42a6      	cmp	r6, r4
 8007e20:	d105      	bne.n	8007e2e <__libc_init_array+0x2e>
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
 8007e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e28:	4798      	blx	r3
 8007e2a:	3601      	adds	r6, #1
 8007e2c:	e7ee      	b.n	8007e0c <__libc_init_array+0xc>
 8007e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e32:	4798      	blx	r3
 8007e34:	3601      	adds	r6, #1
 8007e36:	e7f2      	b.n	8007e1e <__libc_init_array+0x1e>
 8007e38:	08008044 	.word	0x08008044
 8007e3c:	08008044 	.word	0x08008044
 8007e40:	08008044 	.word	0x08008044
 8007e44:	08008048 	.word	0x08008048

08007e48 <malloc>:
 8007e48:	4b02      	ldr	r3, [pc, #8]	; (8007e54 <malloc+0xc>)
 8007e4a:	4601      	mov	r1, r0
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	f000 b863 	b.w	8007f18 <_malloc_r>
 8007e52:	bf00      	nop
 8007e54:	2000002c 	.word	0x2000002c

08007e58 <free>:
 8007e58:	4b02      	ldr	r3, [pc, #8]	; (8007e64 <free+0xc>)
 8007e5a:	4601      	mov	r1, r0
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	f000 b80b 	b.w	8007e78 <_free_r>
 8007e62:	bf00      	nop
 8007e64:	2000002c 	.word	0x2000002c

08007e68 <memset>:
 8007e68:	4402      	add	r2, r0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d100      	bne.n	8007e72 <memset+0xa>
 8007e70:	4770      	bx	lr
 8007e72:	f803 1b01 	strb.w	r1, [r3], #1
 8007e76:	e7f9      	b.n	8007e6c <memset+0x4>

08007e78 <_free_r>:
 8007e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e7a:	2900      	cmp	r1, #0
 8007e7c:	d048      	beq.n	8007f10 <_free_r+0x98>
 8007e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e82:	9001      	str	r0, [sp, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f1a1 0404 	sub.w	r4, r1, #4
 8007e8a:	bfb8      	it	lt
 8007e8c:	18e4      	addlt	r4, r4, r3
 8007e8e:	f000 f8ad 	bl	8007fec <__malloc_lock>
 8007e92:	4a20      	ldr	r2, [pc, #128]	; (8007f14 <_free_r+0x9c>)
 8007e94:	9801      	ldr	r0, [sp, #4]
 8007e96:	6813      	ldr	r3, [r2, #0]
 8007e98:	4615      	mov	r5, r2
 8007e9a:	b933      	cbnz	r3, 8007eaa <_free_r+0x32>
 8007e9c:	6063      	str	r3, [r4, #4]
 8007e9e:	6014      	str	r4, [r2, #0]
 8007ea0:	b003      	add	sp, #12
 8007ea2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ea6:	f000 b8a7 	b.w	8007ff8 <__malloc_unlock>
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	d90b      	bls.n	8007ec6 <_free_r+0x4e>
 8007eae:	6821      	ldr	r1, [r4, #0]
 8007eb0:	1862      	adds	r2, r4, r1
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	bf04      	itt	eq
 8007eb6:	681a      	ldreq	r2, [r3, #0]
 8007eb8:	685b      	ldreq	r3, [r3, #4]
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	bf04      	itt	eq
 8007ebe:	1852      	addeq	r2, r2, r1
 8007ec0:	6022      	streq	r2, [r4, #0]
 8007ec2:	602c      	str	r4, [r5, #0]
 8007ec4:	e7ec      	b.n	8007ea0 <_free_r+0x28>
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	b10b      	cbz	r3, 8007ed0 <_free_r+0x58>
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	d9fa      	bls.n	8007ec6 <_free_r+0x4e>
 8007ed0:	6811      	ldr	r1, [r2, #0]
 8007ed2:	1855      	adds	r5, r2, r1
 8007ed4:	42a5      	cmp	r5, r4
 8007ed6:	d10b      	bne.n	8007ef0 <_free_r+0x78>
 8007ed8:	6824      	ldr	r4, [r4, #0]
 8007eda:	4421      	add	r1, r4
 8007edc:	1854      	adds	r4, r2, r1
 8007ede:	42a3      	cmp	r3, r4
 8007ee0:	6011      	str	r1, [r2, #0]
 8007ee2:	d1dd      	bne.n	8007ea0 <_free_r+0x28>
 8007ee4:	681c      	ldr	r4, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	6053      	str	r3, [r2, #4]
 8007eea:	4421      	add	r1, r4
 8007eec:	6011      	str	r1, [r2, #0]
 8007eee:	e7d7      	b.n	8007ea0 <_free_r+0x28>
 8007ef0:	d902      	bls.n	8007ef8 <_free_r+0x80>
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	6003      	str	r3, [r0, #0]
 8007ef6:	e7d3      	b.n	8007ea0 <_free_r+0x28>
 8007ef8:	6825      	ldr	r5, [r4, #0]
 8007efa:	1961      	adds	r1, r4, r5
 8007efc:	428b      	cmp	r3, r1
 8007efe:	bf04      	itt	eq
 8007f00:	6819      	ldreq	r1, [r3, #0]
 8007f02:	685b      	ldreq	r3, [r3, #4]
 8007f04:	6063      	str	r3, [r4, #4]
 8007f06:	bf04      	itt	eq
 8007f08:	1949      	addeq	r1, r1, r5
 8007f0a:	6021      	streq	r1, [r4, #0]
 8007f0c:	6054      	str	r4, [r2, #4]
 8007f0e:	e7c7      	b.n	8007ea0 <_free_r+0x28>
 8007f10:	b003      	add	sp, #12
 8007f12:	bd30      	pop	{r4, r5, pc}
 8007f14:	200000b4 	.word	0x200000b4

08007f18 <_malloc_r>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	1ccd      	adds	r5, r1, #3
 8007f1c:	f025 0503 	bic.w	r5, r5, #3
 8007f20:	3508      	adds	r5, #8
 8007f22:	2d0c      	cmp	r5, #12
 8007f24:	bf38      	it	cc
 8007f26:	250c      	movcc	r5, #12
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	db01      	blt.n	8007f32 <_malloc_r+0x1a>
 8007f2e:	42a9      	cmp	r1, r5
 8007f30:	d903      	bls.n	8007f3a <_malloc_r+0x22>
 8007f32:	230c      	movs	r3, #12
 8007f34:	6033      	str	r3, [r6, #0]
 8007f36:	2000      	movs	r0, #0
 8007f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f3a:	f000 f857 	bl	8007fec <__malloc_lock>
 8007f3e:	4921      	ldr	r1, [pc, #132]	; (8007fc4 <_malloc_r+0xac>)
 8007f40:	680a      	ldr	r2, [r1, #0]
 8007f42:	4614      	mov	r4, r2
 8007f44:	b99c      	cbnz	r4, 8007f6e <_malloc_r+0x56>
 8007f46:	4f20      	ldr	r7, [pc, #128]	; (8007fc8 <_malloc_r+0xb0>)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	b923      	cbnz	r3, 8007f56 <_malloc_r+0x3e>
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f000 f83c 	bl	8007fcc <_sbrk_r>
 8007f54:	6038      	str	r0, [r7, #0]
 8007f56:	4629      	mov	r1, r5
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f000 f837 	bl	8007fcc <_sbrk_r>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	d123      	bne.n	8007faa <_malloc_r+0x92>
 8007f62:	230c      	movs	r3, #12
 8007f64:	6033      	str	r3, [r6, #0]
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 f846 	bl	8007ff8 <__malloc_unlock>
 8007f6c:	e7e3      	b.n	8007f36 <_malloc_r+0x1e>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	1b5b      	subs	r3, r3, r5
 8007f72:	d417      	bmi.n	8007fa4 <_malloc_r+0x8c>
 8007f74:	2b0b      	cmp	r3, #11
 8007f76:	d903      	bls.n	8007f80 <_malloc_r+0x68>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	441c      	add	r4, r3
 8007f7c:	6025      	str	r5, [r4, #0]
 8007f7e:	e004      	b.n	8007f8a <_malloc_r+0x72>
 8007f80:	6863      	ldr	r3, [r4, #4]
 8007f82:	42a2      	cmp	r2, r4
 8007f84:	bf0c      	ite	eq
 8007f86:	600b      	streq	r3, [r1, #0]
 8007f88:	6053      	strne	r3, [r2, #4]
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f000 f834 	bl	8007ff8 <__malloc_unlock>
 8007f90:	f104 000b 	add.w	r0, r4, #11
 8007f94:	1d23      	adds	r3, r4, #4
 8007f96:	f020 0007 	bic.w	r0, r0, #7
 8007f9a:	1ac2      	subs	r2, r0, r3
 8007f9c:	d0cc      	beq.n	8007f38 <_malloc_r+0x20>
 8007f9e:	1a1b      	subs	r3, r3, r0
 8007fa0:	50a3      	str	r3, [r4, r2]
 8007fa2:	e7c9      	b.n	8007f38 <_malloc_r+0x20>
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	6864      	ldr	r4, [r4, #4]
 8007fa8:	e7cc      	b.n	8007f44 <_malloc_r+0x2c>
 8007faa:	1cc4      	adds	r4, r0, #3
 8007fac:	f024 0403 	bic.w	r4, r4, #3
 8007fb0:	42a0      	cmp	r0, r4
 8007fb2:	d0e3      	beq.n	8007f7c <_malloc_r+0x64>
 8007fb4:	1a21      	subs	r1, r4, r0
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f000 f808 	bl	8007fcc <_sbrk_r>
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d1dd      	bne.n	8007f7c <_malloc_r+0x64>
 8007fc0:	e7cf      	b.n	8007f62 <_malloc_r+0x4a>
 8007fc2:	bf00      	nop
 8007fc4:	200000b4 	.word	0x200000b4
 8007fc8:	200000b8 	.word	0x200000b8

08007fcc <_sbrk_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d06      	ldr	r5, [pc, #24]	; (8007fe8 <_sbrk_r+0x1c>)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	f7f8 feb4 	bl	8000d44 <_sbrk>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_sbrk_r+0x1a>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_sbrk_r+0x1a>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	200008e4 	.word	0x200008e4

08007fec <__malloc_lock>:
 8007fec:	4801      	ldr	r0, [pc, #4]	; (8007ff4 <__malloc_lock+0x8>)
 8007fee:	f000 b809 	b.w	8008004 <__retarget_lock_acquire_recursive>
 8007ff2:	bf00      	nop
 8007ff4:	200008ec 	.word	0x200008ec

08007ff8 <__malloc_unlock>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	; (8008000 <__malloc_unlock+0x8>)
 8007ffa:	f000 b804 	b.w	8008006 <__retarget_lock_release_recursive>
 8007ffe:	bf00      	nop
 8008000:	200008ec 	.word	0x200008ec

08008004 <__retarget_lock_acquire_recursive>:
 8008004:	4770      	bx	lr

08008006 <__retarget_lock_release_recursive>:
 8008006:	4770      	bx	lr

08008008 <_init>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	bf00      	nop
 800800c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800e:	bc08      	pop	{r3}
 8008010:	469e      	mov	lr, r3
 8008012:	4770      	bx	lr

08008014 <_fini>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	bf00      	nop
 8008018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801a:	bc08      	pop	{r3}
 800801c:	469e      	mov	lr, r3
 800801e:	4770      	bx	lr
